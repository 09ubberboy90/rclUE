// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from diagnostic_msgs/srv/SelfTest.srv - do not modify

#pragma once

#include <CoreMinimal.h>

#include "Srvs/ROS2GenericSrv.h"
#include "rclcUtilities.h"
#include "diagnostic_msgs/srv/self_test.h"

#include "ROS2SelfTestSrv.generated.h"

// potential problem: if this struct is defined multiple times!
USTRUCT(Blueprintable)
struct RCLUE_API FROSSelfTestRequest
{
	GENERATED_BODY()

public:
	

	void SetFromROS2(const diagnostic_msgs__srv__SelfTest_Request& in_ros_data)
	{
    	
	}

	void SetROS2(diagnostic_msgs__srv__SelfTest_Request& out_ros_data) const
	{
    	
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSSelfTestResponse
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	uint8 Passed = 0;

	UPROPERTY(EditAnywhere)
	TArray<uint8> StatusLevel;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> StatusName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> StatusMessage;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> StatusHardwareId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> StatusValuesKey;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> StatusValuesValue;

	

	void SetFromROS2(const diagnostic_msgs__srv__SelfTest_Response& in_ros_data)
	{
    	Id.AppendChars(in_ros_data.id.data, in_ros_data.id.size);

		Passed = in_ros_data.passed;

		for (auto i = 0; i < in_ros_data.status.size; ++i)
		{
			StatusLevel.Emplace(in_ros_data.status.data[i].level);
		}

		for (auto i = 0; i < in_ros_data.status.size; ++i)
		{
			StatusName.Emplace("");
			StatusName[i].AppendChars(in_ros_data.status.data[i].name.data,in_ros_data.status.data[i].name.size);
		}

		for (auto i = 0; i < in_ros_data.status.size; ++i)
		{
			StatusMessage.Emplace("");
			StatusMessage[i].AppendChars(in_ros_data.status.data[i].message.data,in_ros_data.status.data[i].message.size);
		}

		for (auto i = 0; i < in_ros_data.status.size; ++i)
		{
			StatusHardwareId.Emplace("");
			StatusHardwareId[i].AppendChars(in_ros_data.status.data[i].hardware_id.data,in_ros_data.status.data[i].hardware_id.size);
		}

		for (auto i = 0; i < in_ros_data.status.size; ++i)
		{
			StatusValuesKey.Emplace("");
			StatusValuesKey[i].AppendChars(in_ros_data.status.data[i].values.data[i].key.data,in_ros_data.status.data[i].values.data[i].key.size);
		}

		for (auto i = 0; i < in_ros_data.status.size; ++i)
		{
			StatusValuesValue.Emplace("");
			StatusValuesValue[i].AppendChars(in_ros_data.status.data[i].values.data[i].value.data,in_ros_data.status.data[i].values.data[i].value.size);
		}

		
	}

	void SetROS2(diagnostic_msgs__srv__SelfTest_Response& out_ros_data) const
	{
    	{
			FTCHARToUTF8 strUtf8( *Id );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.id.data != nullptr)
		{
			free(out_ros_data.id.data);
		}
		out_ros_data.id.data = (decltype(out_ros_data.id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.id.data)));
		memcpy(out_ros_data.id.data, TCHAR_TO_UTF8(*Id), (strLength+1)*sizeof(char));
			out_ros_data.id.size = strLength;
			out_ros_data.id.capacity = strLength + 1;
		}

		out_ros_data.passed = Passed;

		if (out_ros_data.status.data != nullptr)
		{
			free(out_ros_data.status.data);
		}
		out_ros_data.status.data = (decltype(out_ros_data.status.data))malloc(StatusLevel.Num() * (sizeof(StatusLevel) + sizeof(StatusName) + sizeof(StatusMessage) + sizeof(StatusHardwareId) + sizeof(StatusValuesKey) + sizeof(StatusValuesValue)));
		out_ros_data.status.size = StatusLevel.Num();
		out_ros_data.status.capacity = StatusLevel.Num();
		for (auto i = 0; i < StatusLevel.Num(); ++i)
		{
			out_ros_data.status.data[i].level = StatusLevel[i];

			{
				FTCHARToUTF8 strUtf8( *StatusName[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.status.data[i].name.data = (decltype(out_ros_data.status.data[i].name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.status.data[i].name.data)));
		memcpy(out_ros_data.status.data[i].name.data, TCHAR_TO_UTF8(*StatusName[i]), (strLength+1)*sizeof(char));
				out_ros_data.status.data[i].name.size = strLength;
				out_ros_data.status.data[i].name.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *StatusMessage[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.status.data[i].message.data = (decltype(out_ros_data.status.data[i].message.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.status.data[i].message.data)));
		memcpy(out_ros_data.status.data[i].message.data, TCHAR_TO_UTF8(*StatusMessage[i]), (strLength+1)*sizeof(char));
				out_ros_data.status.data[i].message.size = strLength;
				out_ros_data.status.data[i].message.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *StatusHardwareId[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.status.data[i].hardware_id.data = (decltype(out_ros_data.status.data[i].hardware_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.status.data[i].hardware_id.data)));
		memcpy(out_ros_data.status.data[i].hardware_id.data, TCHAR_TO_UTF8(*StatusHardwareId[i]), (strLength+1)*sizeof(char));
				out_ros_data.status.data[i].hardware_id.size = strLength;
				out_ros_data.status.data[i].hardware_id.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *StatusValuesKey[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.status.data[i].values.data[i].key.data = (decltype(out_ros_data.status.data[i].values.data[i].key.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.status.data[i].values.data[i].key.data)));
		memcpy(out_ros_data.status.data[i].values.data[i].key.data, TCHAR_TO_UTF8(*StatusValuesKey[i]), (strLength+1)*sizeof(char));
				out_ros_data.status.data[i].values.data[i].key.size = strLength;
				out_ros_data.status.data[i].values.data[i].key.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *StatusValuesValue[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.status.data[i].values.data[i].value.data = (decltype(out_ros_data.status.data[i].values.data[i].value.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.status.data[i].values.data[i].value.data)));
		memcpy(out_ros_data.status.data[i].values.data[i].value.data, TCHAR_TO_UTF8(*StatusValuesValue[i]), (strLength+1)*sizeof(char));
				out_ros_data.status.data[i].values.data[i].value.size = strLength;
				out_ros_data.status.data[i].values.data[i].value.capacity = strLength + 1;
			}

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2SelfTestSrv : public UROS2GenericSrv
{
	GENERATED_BODY()

public:
  	UFUNCTION(BlueprintCallable)
	virtual void Init() override;

  	UFUNCTION(BlueprintCallable)
	virtual void Fini() override;

	virtual const rosidl_service_type_support_t* GetTypeSupport() const override;
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void SetRequest(const FROSSelfTestRequest& Request);
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void GetRequest(FROSSelfTestRequest& Request) const;
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void SetResponse(const FROSSelfTestResponse& Response);
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void GetResponse(FROSSelfTestResponse& Response) const;
	
	virtual void* GetRequest() override;
	virtual void* GetResponse() override;

private:
	virtual FString SrvRequestToString() const override;
	virtual FString SrvResponseToString() const override;

	diagnostic_msgs__srv__SelfTest_Request SelfTest_req;
	diagnostic_msgs__srv__SelfTest_Response SelfTest_res;
};