// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from ue_msgs/srv/SpawnEntities.srv - do not modify

#pragma once

#include <CoreMinimal.h>

#include "Srvs/ROS2GenericSrv.h"
#include "rclcUtilities.h"
#include "ue_msgs/srv/spawn_entities.h"

#include "ROS2SpawnEntitiesSrv.generated.h"

// potential problem: if this struct is defined multiple times!
USTRUCT(Blueprintable)
struct RCLUE_API FROSSpawnEntitiesRequest
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> Type;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> StateName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> StatePosePosition;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FQuat> StatePoseOrientation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> StateTwistLinear;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> StateTwistAngular;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> StateReferenceFrame;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> Tags;

	

	void SetFromROS2(const ue_msgs__srv__SpawnEntities_Request& in_ros_data)
	{
    	for (auto i = 0; i < in_ros_data.type.size; ++i)
		{
			Type.Emplace("");
			Type[i].AppendChars(in_ros_data.type.data[i].data,in_ros_data.type.data[i].size);
		}

		for (auto i = 0; i < in_ros_data.state.size; ++i)
		{
			StateName.Emplace("");
			StateName[i].AppendChars(in_ros_data.state.data[i].name.data,in_ros_data.state.data[i].name.size);
		}

		for (auto i = 0; i < in_ros_data.state.size; ++i)
		{
			StatePosePosition.Emplace(FVector::ZeroVector);
			StatePosePosition[i].X = in_ros_data.state.data[i].pose.position.x;
			StatePosePosition[i].Y = in_ros_data.state.data[i].pose.position.y;
			StatePosePosition[i].Z = in_ros_data.state.data[i].pose.position.z;
		}

		for (auto i = 0; i < in_ros_data.state.size; ++i)
		{
			StatePoseOrientation.Emplace(FQuat::Identity);
			StatePoseOrientation[i].X = in_ros_data.state.data[i].pose.orientation.x;
			StatePoseOrientation[i].Y = in_ros_data.state.data[i].pose.orientation.y;
			StatePoseOrientation[i].Z = in_ros_data.state.data[i].pose.orientation.z;
			StatePoseOrientation[i].W = in_ros_data.state.data[i].pose.orientation.w;
		}

		for (auto i = 0; i < in_ros_data.state.size; ++i)
		{
			StateTwistLinear.Emplace(FVector::ZeroVector);
			StateTwistLinear[i].X = in_ros_data.state.data[i].twist.linear.x;
			StateTwistLinear[i].Y = in_ros_data.state.data[i].twist.linear.y;
			StateTwistLinear[i].Z = in_ros_data.state.data[i].twist.linear.z;
		}

		for (auto i = 0; i < in_ros_data.state.size; ++i)
		{
			StateTwistAngular.Emplace(FVector::ZeroVector);
			StateTwistAngular[i].X = in_ros_data.state.data[i].twist.angular.x;
			StateTwistAngular[i].Y = in_ros_data.state.data[i].twist.angular.y;
			StateTwistAngular[i].Z = in_ros_data.state.data[i].twist.angular.z;
		}

		for (auto i = 0; i < in_ros_data.state.size; ++i)
		{
			StateReferenceFrame.Emplace("");
			StateReferenceFrame[i].AppendChars(in_ros_data.state.data[i].reference_frame.data,in_ros_data.state.data[i].reference_frame.size);
		}

		for (auto i = 0; i < in_ros_data.tags.size; ++i)
		{
			Tags.Emplace("");
			Tags[i].AppendChars(in_ros_data.tags.data[i].data,in_ros_data.tags.data[i].size);
		}

		
	}

	void SetROS2(ue_msgs__srv__SpawnEntities_Request& out_ros_data) const
	{
    	if (out_ros_data.type.data != nullptr)
		{
			free(out_ros_data.type.data);
		}
		out_ros_data.type.data = (decltype(out_ros_data.type.data))malloc((Type.Num())*sizeof(decltype(*out_ros_data.type.data)));
		for (auto i = 0; i < Type.Num(); ++i)
		{
			{
				FTCHARToUTF8 strUtf8( *Type[i] );
				int32 strLength = strUtf8.Length();
				if (out_ros_data.type.data[i].data != nullptr)
				{
					free(out_ros_data.type.data[i].data);
				}
				out_ros_data.type.data[i].data = (char*)malloc((strLength+1)*sizeof(char));
				memcpy(out_ros_data.type.data[i].data, TCHAR_TO_UTF8(*Type[i]), (strLength+1)*sizeof(char));
				out_ros_data.type.data[i].size = strLength;
				out_ros_data.type.data[i].capacity = strLength + 1;
			}
		}

		if (out_ros_data.state.data != nullptr)
		{
			free(out_ros_data.state.data);
		}
		out_ros_data.state.data = (decltype(out_ros_data.state.data))malloc(StateName.Num() * (sizeof(StateName) + sizeof(StatePosePosition) + sizeof(StatePoseOrientation) + sizeof(StateTwistLinear) + sizeof(StateTwistAngular) + sizeof(StateReferenceFrame)));
		out_ros_data.state.size = StateName.Num();
		out_ros_data.state.capacity = StateName.Num();
		for (auto i = 0; i < StateName.Num(); ++i)
		{
			{
				FTCHARToUTF8 strUtf8( *StateName[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.state.data[i].name.data = (decltype(out_ros_data.state.data[i].name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.state.data[i].name.data)));
		memcpy(out_ros_data.state.data[i].name.data, TCHAR_TO_UTF8(*StateName[i]), (strLength+1)*sizeof(char));
				out_ros_data.state.data[i].name.size = strLength;
				out_ros_data.state.data[i].name.capacity = strLength + 1;
			}

			out_ros_data.state.data[i].pose.position.x = StatePosePosition[i].X;
			out_ros_data.state.data[i].pose.position.y = StatePosePosition[i].Y;
			out_ros_data.state.data[i].pose.position.z = StatePosePosition[i].Z;

			out_ros_data.state.data[i].pose.orientation.x = StatePoseOrientation[i].X;
			out_ros_data.state.data[i].pose.orientation.y = StatePoseOrientation[i].Y;
			out_ros_data.state.data[i].pose.orientation.z = StatePoseOrientation[i].Z;
			out_ros_data.state.data[i].pose.orientation.w = StatePoseOrientation[i].W;

			out_ros_data.state.data[i].twist.linear.x = StateTwistLinear[i].X;
			out_ros_data.state.data[i].twist.linear.y = StateTwistLinear[i].Y;
			out_ros_data.state.data[i].twist.linear.z = StateTwistLinear[i].Z;

			out_ros_data.state.data[i].twist.angular.x = StateTwistAngular[i].X;
			out_ros_data.state.data[i].twist.angular.y = StateTwistAngular[i].Y;
			out_ros_data.state.data[i].twist.angular.z = StateTwistAngular[i].Z;

			{
				FTCHARToUTF8 strUtf8( *StateReferenceFrame[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.state.data[i].reference_frame.data = (decltype(out_ros_data.state.data[i].reference_frame.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.state.data[i].reference_frame.data)));
		memcpy(out_ros_data.state.data[i].reference_frame.data, TCHAR_TO_UTF8(*StateReferenceFrame[i]), (strLength+1)*sizeof(char));
				out_ros_data.state.data[i].reference_frame.size = strLength;
				out_ros_data.state.data[i].reference_frame.capacity = strLength + 1;
			}

			}
	if (out_ros_data.tags.data != nullptr)
		{
			free(out_ros_data.tags.data);
		}
		out_ros_data.tags.data = (decltype(out_ros_data.tags.data))malloc((Tags.Num())*sizeof(decltype(*out_ros_data.tags.data)));
		for (auto i = 0; i < Tags.Num(); ++i)
		{
			{
				FTCHARToUTF8 strUtf8( *Tags[i] );
				int32 strLength = strUtf8.Length();
				if (out_ros_data.tags.data[i].data != nullptr)
				{
					free(out_ros_data.tags.data[i].data);
				}
				out_ros_data.tags.data[i].data = (char*)malloc((strLength+1)*sizeof(char));
				memcpy(out_ros_data.tags.data[i].data, TCHAR_TO_UTF8(*Tags[i]), (strLength+1)*sizeof(char));
				out_ros_data.tags.data[i].size = strLength;
				out_ros_data.tags.data[i].capacity = strLength + 1;
			}
		}

		
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSSpawnEntitiesResponse
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool bSuccess = false;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString StatusMessage;

	

	void SetFromROS2(const ue_msgs__srv__SpawnEntities_Response& in_ros_data)
	{
    	bSuccess = in_ros_data.success;

		StatusMessage.AppendChars(in_ros_data.status_message.data, in_ros_data.status_message.size);

		
	}

	void SetROS2(ue_msgs__srv__SpawnEntities_Response& out_ros_data) const
	{
    	out_ros_data.success = bSuccess;

		{
			FTCHARToUTF8 strUtf8( *StatusMessage );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.status_message.data != nullptr)
		{
			free(out_ros_data.status_message.data);
		}
		out_ros_data.status_message.data = (decltype(out_ros_data.status_message.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.status_message.data)));
		memcpy(out_ros_data.status_message.data, TCHAR_TO_UTF8(*StatusMessage), (strLength+1)*sizeof(char));
			out_ros_data.status_message.size = strLength;
			out_ros_data.status_message.capacity = strLength + 1;
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2SpawnEntitiesSrv : public UROS2GenericSrv
{
	GENERATED_BODY()

public:
  	UFUNCTION(BlueprintCallable)
	virtual void Init() override;

  	UFUNCTION(BlueprintCallable)
	virtual void Fini() override;

	virtual const rosidl_service_type_support_t* GetTypeSupport() const override;
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void SetRequest(const FROSSpawnEntitiesRequest& Request);
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void GetRequest(FROSSpawnEntitiesRequest& Request) const;
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void SetResponse(const FROSSpawnEntitiesResponse& Response);
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void GetResponse(FROSSpawnEntitiesResponse& Response) const;
	
	virtual void* GetRequest() override;
	virtual void* GetResponse() override;

private:
	virtual FString SrvRequestToString() const override;
	virtual FString SrvResponseToString() const override;

	ue_msgs__srv__SpawnEntities_Request SpawnEntities_req;
	ue_msgs__srv__SpawnEntities_Response SpawnEntities_res;
};