// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from ue_msgs/srv/GetEntityState.srv - do not modify

#pragma once

#include <CoreMinimal.h>

#include "Srvs/ROS2GenericSrv.h"
#include "rclcUtilities.h"
#include "ue_msgs/srv/get_entity_state.h"

#include "ROS2GetEntityStateSrv.generated.h"

// potential problem: if this struct is defined multiple times!
USTRUCT(Blueprintable)
struct RCLUE_API FROSGetEntityStateRequest
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ReferenceFrame;

	

	void SetFromROS2(const ue_msgs__srv__GetEntityState_Request& in_ros_data)
	{
    	Name.AppendChars(in_ros_data.name.data, in_ros_data.name.size);

		ReferenceFrame.AppendChars(in_ros_data.reference_frame.data, in_ros_data.reference_frame.size);

		
	}

	void SetROS2(ue_msgs__srv__GetEntityState_Request& out_ros_data) const
	{
    	{
			FTCHARToUTF8 strUtf8( *Name );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.name.data != nullptr)
		{
			free(out_ros_data.name.data);
		}
		out_ros_data.name.data = (decltype(out_ros_data.name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.name.data)));
		memcpy(out_ros_data.name.data, TCHAR_TO_UTF8(*Name), (strLength+1)*sizeof(char));
			out_ros_data.name.size = strLength;
			out_ros_data.name.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *ReferenceFrame );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.reference_frame.data != nullptr)
		{
			free(out_ros_data.reference_frame.data);
		}
		out_ros_data.reference_frame.data = (decltype(out_ros_data.reference_frame.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.reference_frame.data)));
		memcpy(out_ros_data.reference_frame.data, TCHAR_TO_UTF8(*ReferenceFrame), (strLength+1)*sizeof(char));
			out_ros_data.reference_frame.size = strLength;
			out_ros_data.reference_frame.capacity = strLength + 1;
		}

		
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSGetEntityStateResponse
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString StateName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector StatePosePosition = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat StatePoseOrientation = FQuat::Identity;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector StateTwistLinear = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector StateTwistAngular = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString StateReferenceFrame;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool bSuccess = false;

	

	void SetFromROS2(const ue_msgs__srv__GetEntityState_Response& in_ros_data)
	{
    	StateName.AppendChars(in_ros_data.state.name.data, in_ros_data.state.name.size);

		StatePosePosition.X = in_ros_data.state.pose.position.x;
		StatePosePosition.Y = in_ros_data.state.pose.position.y;
		StatePosePosition.Z = in_ros_data.state.pose.position.z;

		StatePoseOrientation.X = in_ros_data.state.pose.orientation.x;
		StatePoseOrientation.Y = in_ros_data.state.pose.orientation.y;
		StatePoseOrientation.Z = in_ros_data.state.pose.orientation.z;
		StatePoseOrientation.W = in_ros_data.state.pose.orientation.w;

		StateTwistLinear.X = in_ros_data.state.twist.linear.x;
		StateTwistLinear.Y = in_ros_data.state.twist.linear.y;
		StateTwistLinear.Z = in_ros_data.state.twist.linear.z;

		StateTwistAngular.X = in_ros_data.state.twist.angular.x;
		StateTwistAngular.Y = in_ros_data.state.twist.angular.y;
		StateTwistAngular.Z = in_ros_data.state.twist.angular.z;

		StateReferenceFrame.AppendChars(in_ros_data.state.reference_frame.data, in_ros_data.state.reference_frame.size);

		bSuccess = in_ros_data.success;

		
	}

	void SetROS2(ue_msgs__srv__GetEntityState_Response& out_ros_data) const
	{
    	{
			FTCHARToUTF8 strUtf8( *StateName );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.state.name.data != nullptr)
		{
			free(out_ros_data.state.name.data);
		}
		out_ros_data.state.name.data = (decltype(out_ros_data.state.name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.state.name.data)));
		memcpy(out_ros_data.state.name.data, TCHAR_TO_UTF8(*StateName), (strLength+1)*sizeof(char));
			out_ros_data.state.name.size = strLength;
			out_ros_data.state.name.capacity = strLength + 1;
		}

		out_ros_data.state.pose.position.x = StatePosePosition.X;
		out_ros_data.state.pose.position.y = StatePosePosition.Y;
		out_ros_data.state.pose.position.z = StatePosePosition.Z;

		out_ros_data.state.pose.orientation.x = StatePoseOrientation.X;
		out_ros_data.state.pose.orientation.y = StatePoseOrientation.Y;
		out_ros_data.state.pose.orientation.z = StatePoseOrientation.Z;
		out_ros_data.state.pose.orientation.w = StatePoseOrientation.W;

		out_ros_data.state.twist.linear.x = StateTwistLinear.X;
		out_ros_data.state.twist.linear.y = StateTwistLinear.Y;
		out_ros_data.state.twist.linear.z = StateTwistLinear.Z;

		out_ros_data.state.twist.angular.x = StateTwistAngular.X;
		out_ros_data.state.twist.angular.y = StateTwistAngular.Y;
		out_ros_data.state.twist.angular.z = StateTwistAngular.Z;

		{
			FTCHARToUTF8 strUtf8( *StateReferenceFrame );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.state.reference_frame.data != nullptr)
		{
			free(out_ros_data.state.reference_frame.data);
		}
		out_ros_data.state.reference_frame.data = (decltype(out_ros_data.state.reference_frame.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.state.reference_frame.data)));
		memcpy(out_ros_data.state.reference_frame.data, TCHAR_TO_UTF8(*StateReferenceFrame), (strLength+1)*sizeof(char));
			out_ros_data.state.reference_frame.size = strLength;
			out_ros_data.state.reference_frame.capacity = strLength + 1;
		}

		out_ros_data.success = bSuccess;

		
	}
};

UCLASS()
class RCLUE_API UROS2GetEntityStateSrv : public UROS2GenericSrv
{
	GENERATED_BODY()

public:
  	UFUNCTION(BlueprintCallable)
	virtual void Init() override;

  	UFUNCTION(BlueprintCallable)
	virtual void Fini() override;

	virtual const rosidl_service_type_support_t* GetTypeSupport() const override;
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void SetRequest(const FROSGetEntityStateRequest& Request);
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void GetRequest(FROSGetEntityStateRequest& Request) const;
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void SetResponse(const FROSGetEntityStateResponse& Response);
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void GetResponse(FROSGetEntityStateResponse& Response) const;
	
	virtual void* GetRequest() override;
	virtual void* GetResponse() override;

private:
	virtual FString SrvRequestToString() const override;
	virtual FString SrvResponseToString() const override;

	ue_msgs__srv__GetEntityState_Request GetEntityState_req;
	ue_msgs__srv__GetEntityState_Response GetEntityState_res;
};