// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from diagnostic_msgs/srv/AddDiagnostics.srv - do not modify

#pragma once

#include <CoreMinimal.h>

#include "Srvs/ROS2GenericSrv.h"
#include "rclcUtilities.h"
#include "diagnostic_msgs/srv/add_diagnostics.h"

#include "ROS2AddDiagnosticsSrv.generated.h"

// potential problem: if this struct is defined multiple times!
USTRUCT(Blueprintable)
struct RCLUE_API FROSAddDiagnosticsRequest
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString LoadNamespace;

	

	void SetFromROS2(const diagnostic_msgs__srv__AddDiagnostics_Request& in_ros_data)
	{
    	LoadNamespace.AppendChars(in_ros_data.load_namespace.data, in_ros_data.load_namespace.size);

		
	}

	void SetROS2(diagnostic_msgs__srv__AddDiagnostics_Request& out_ros_data) const
	{
    	{
			FTCHARToUTF8 strUtf8( *LoadNamespace );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.load_namespace.data != nullptr)
		{
			free(out_ros_data.load_namespace.data);
		}
		out_ros_data.load_namespace.data = (decltype(out_ros_data.load_namespace.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.load_namespace.data)));
		memcpy(out_ros_data.load_namespace.data, TCHAR_TO_UTF8(*LoadNamespace), (strLength+1)*sizeof(char));
			out_ros_data.load_namespace.size = strLength;
			out_ros_data.load_namespace.capacity = strLength + 1;
		}

		
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSAddDiagnosticsResponse
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool bSuccess = false;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Message;

	

	void SetFromROS2(const diagnostic_msgs__srv__AddDiagnostics_Response& in_ros_data)
	{
    	bSuccess = in_ros_data.success;

		Message.AppendChars(in_ros_data.message.data, in_ros_data.message.size);

		
	}

	void SetROS2(diagnostic_msgs__srv__AddDiagnostics_Response& out_ros_data) const
	{
    	out_ros_data.success = bSuccess;

		{
			FTCHARToUTF8 strUtf8( *Message );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.message.data != nullptr)
		{
			free(out_ros_data.message.data);
		}
		out_ros_data.message.data = (decltype(out_ros_data.message.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.message.data)));
		memcpy(out_ros_data.message.data, TCHAR_TO_UTF8(*Message), (strLength+1)*sizeof(char));
			out_ros_data.message.size = strLength;
			out_ros_data.message.capacity = strLength + 1;
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2AddDiagnosticsSrv : public UROS2GenericSrv
{
	GENERATED_BODY()

public:
  	UFUNCTION(BlueprintCallable)
	virtual void Init() override;

  	UFUNCTION(BlueprintCallable)
	virtual void Fini() override;

	virtual const rosidl_service_type_support_t* GetTypeSupport() const override;
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void SetRequest(const FROSAddDiagnosticsRequest& Request);
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void GetRequest(FROSAddDiagnosticsRequest& Request) const;
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void SetResponse(const FROSAddDiagnosticsResponse& Response);
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void GetResponse(FROSAddDiagnosticsResponse& Response) const;
	
	virtual void* GetRequest() override;
	virtual void* GetResponse() override;

private:
	virtual FString SrvRequestToString() const override;
	virtual FString SrvResponseToString() const override;

	diagnostic_msgs__srv__AddDiagnostics_Request AddDiagnostics_req;
	diagnostic_msgs__srv__AddDiagnostics_Response AddDiagnostics_res;
};