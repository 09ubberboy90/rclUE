// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from nav_msgs/srv/GetMap.srv - do not modify

#pragma once

#include <CoreMinimal.h>

#include "Srvs/ROS2GenericSrv.h"
#include "rclcUtilities.h"
#include "nav_msgs/srv/get_map.h"

#include "ROS2GetMapSrv.generated.h"

// potential problem: if this struct is defined multiple times!
USTRUCT(Blueprintable)
struct RCLUE_API FROSGetMapRequest
{
	GENERATED_BODY()

public:
	

	void SetFromROS2(const nav_msgs__srv__GetMap_Request& in_ros_data)
	{
    	
	}

	void SetROS2(nav_msgs__srv__GetMap_Request& out_ros_data) const
	{
    	
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSGetMapResponse
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MapHeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int MapHeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString MapHeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int MapInfoMapLoadTimeSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int MapInfoMapLoadTimeNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float MapInfoResolution = 0.f;

	UPROPERTY(EditAnywhere)
	unsigned int MapInfoWidth = 0;

	UPROPERTY(EditAnywhere)
	unsigned int MapInfoHeight = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector MapInfoOriginPosition = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat MapInfoOriginOrientation = FQuat::Identity;

	UPROPERTY(EditAnywhere)
	TArray<int8> MapData;

	

	void SetFromROS2(const nav_msgs__srv__GetMap_Response& in_ros_data)
	{
    	MapHeaderStampSec = in_ros_data.map.header.stamp.sec;

		MapHeaderStampNanosec = in_ros_data.map.header.stamp.nanosec;

		MapHeaderFrameId.AppendChars(in_ros_data.map.header.frame_id.data, in_ros_data.map.header.frame_id.size);

		MapInfoMapLoadTimeSec = in_ros_data.map.info.map_load_time.sec;

		MapInfoMapLoadTimeNanosec = in_ros_data.map.info.map_load_time.nanosec;

		MapInfoResolution = in_ros_data.map.info.resolution;

		MapInfoWidth = in_ros_data.map.info.width;

		MapInfoHeight = in_ros_data.map.info.height;

		MapInfoOriginPosition.X = in_ros_data.map.info.origin.position.x;
		MapInfoOriginPosition.Y = in_ros_data.map.info.origin.position.y;
		MapInfoOriginPosition.Z = in_ros_data.map.info.origin.position.z;

		MapInfoOriginOrientation.X = in_ros_data.map.info.origin.orientation.x;
		MapInfoOriginOrientation.Y = in_ros_data.map.info.origin.orientation.y;
		MapInfoOriginOrientation.Z = in_ros_data.map.info.origin.orientation.z;
		MapInfoOriginOrientation.W = in_ros_data.map.info.origin.orientation.w;

		for (auto i = 0; i < in_ros_data.map.data.size; ++i)
		{
			MapData.Emplace(in_ros_data.map.data.data[i]);
		}

		
	}

	void SetROS2(nav_msgs__srv__GetMap_Response& out_ros_data) const
	{
    	out_ros_data.map.header.stamp.sec = MapHeaderStampSec;

		out_ros_data.map.header.stamp.nanosec = MapHeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *MapHeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.map.header.frame_id.data != nullptr)
		{
			free(out_ros_data.map.header.frame_id.data);
		}
		out_ros_data.map.header.frame_id.data = (decltype(out_ros_data.map.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.map.header.frame_id.data)));
		memcpy(out_ros_data.map.header.frame_id.data, TCHAR_TO_UTF8(*MapHeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.map.header.frame_id.size = strLength;
			out_ros_data.map.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.map.info.map_load_time.sec = MapInfoMapLoadTimeSec;

		out_ros_data.map.info.map_load_time.nanosec = MapInfoMapLoadTimeNanosec;

		out_ros_data.map.info.resolution = MapInfoResolution;

		out_ros_data.map.info.width = MapInfoWidth;

		out_ros_data.map.info.height = MapInfoHeight;

		out_ros_data.map.info.origin.position.x = MapInfoOriginPosition.X;
		out_ros_data.map.info.origin.position.y = MapInfoOriginPosition.Y;
		out_ros_data.map.info.origin.position.z = MapInfoOriginPosition.Z;

		out_ros_data.map.info.origin.orientation.x = MapInfoOriginOrientation.X;
		out_ros_data.map.info.origin.orientation.y = MapInfoOriginOrientation.Y;
		out_ros_data.map.info.origin.orientation.z = MapInfoOriginOrientation.Z;
		out_ros_data.map.info.origin.orientation.w = MapInfoOriginOrientation.W;

		if (out_ros_data.map.data.data != nullptr)
		{
			free(out_ros_data.map.data.data);
		}
		out_ros_data.map.data.data = (decltype(out_ros_data.map.data.data))malloc((MapData.Num())*sizeof(decltype(*out_ros_data.map.data.data)));
		
		for (auto i = 0; i < MapData.Num(); ++i)
		{
			out_ros_data.map.data.data[i] = MapData[i];
		}

		out_ros_data.map.data.size = MapData.Num();
		out_ros_data.map.data.capacity = MapData.Num();

		
	}
};

UCLASS()
class RCLUE_API UROS2GetMapSrv : public UROS2GenericSrv
{
	GENERATED_BODY()

public:
  	UFUNCTION(BlueprintCallable)
	virtual void Init() override;

  	UFUNCTION(BlueprintCallable)
	virtual void Fini() override;

	virtual const rosidl_service_type_support_t* GetTypeSupport() const override;
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void SetRequest(const FROSGetMapRequest& Request);
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void GetRequest(FROSGetMapRequest& Request) const;
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void SetResponse(const FROSGetMapResponse& Response);
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void GetResponse(FROSGetMapResponse& Response) const;
	
	virtual void* GetRequest() override;
	virtual void* GetResponse() override;

private:
	virtual FString SrvRequestToString() const override;
	virtual FString SrvResponseToString() const override;

	nav_msgs__srv__GetMap_Request GetMap_req;
	nav_msgs__srv__GetMap_Response GetMap_res;
};