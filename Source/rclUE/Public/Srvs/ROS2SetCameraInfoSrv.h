// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/srv/SetCameraInfo.srv - do not modify

#pragma once

#include <CoreMinimal.h>

#include "Srvs/ROS2GenericSrv.h"
#include "rclcUtilities.h"
#include "sensor_msgs/srv/set_camera_info.h"

#include "ROS2SetCameraInfoSrv.generated.h"

// potential problem: if this struct is defined multiple times!
USTRUCT(Blueprintable)
struct RCLUE_API FROSSetCameraInfoRequest
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CameraInfoHeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CameraInfoHeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString CameraInfoHeaderFrameId;

	UPROPERTY(EditAnywhere)
	unsigned int CameraInfoHeight = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CameraInfoWidth = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString CameraInfoDistortionModel;

	UPROPERTY(EditAnywhere)
	TArray<double> CameraInfoD;

	UPROPERTY(EditAnywhere)
	TArray<double> CameraInfoK;

	UPROPERTY(EditAnywhere)
	TArray<double> CameraInfoR;

	UPROPERTY(EditAnywhere)
	TArray<double> CameraInfoP;

	UPROPERTY(EditAnywhere)
	unsigned int CameraInfoBinningX = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CameraInfoBinningY = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CameraInfoRoiXOffset = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CameraInfoRoiYOffset = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CameraInfoRoiHeight = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CameraInfoRoiWidth = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool CameraInfoRoibDoRectify = false;

	

	void SetFromROS2(const sensor_msgs__srv__SetCameraInfo_Request& in_ros_data)
	{
    	CameraInfoHeaderStampSec = in_ros_data.camera_info.header.stamp.sec;

		CameraInfoHeaderStampNanosec = in_ros_data.camera_info.header.stamp.nanosec;

		CameraInfoHeaderFrameId.AppendChars(in_ros_data.camera_info.header.frame_id.data, in_ros_data.camera_info.header.frame_id.size);

		CameraInfoHeight = in_ros_data.camera_info.height;

		CameraInfoWidth = in_ros_data.camera_info.width;

		CameraInfoDistortionModel.AppendChars(in_ros_data.camera_info.distortion_model.data, in_ros_data.camera_info.distortion_model.size);

		for (auto i = 0; i < in_ros_data.camera_info.d.size; ++i)
		{
			CameraInfoD.Emplace(in_ros_data.camera_info.d.data[i]);
		}

		for (auto i = 0; i < 9; ++i)
		{
			CameraInfoK.Emplace(in_ros_data.camera_info.k[i]);
		}

		for (auto i = 0; i < 9; ++i)
		{
			CameraInfoR.Emplace(in_ros_data.camera_info.r[i]);
		}

		for (auto i = 0; i < 12; ++i)
		{
			CameraInfoP.Emplace(in_ros_data.camera_info.p[i]);
		}

		CameraInfoBinningX = in_ros_data.camera_info.binning_x;

		CameraInfoBinningY = in_ros_data.camera_info.binning_y;

		CameraInfoRoiXOffset = in_ros_data.camera_info.roi.x_offset;

		CameraInfoRoiYOffset = in_ros_data.camera_info.roi.y_offset;

		CameraInfoRoiHeight = in_ros_data.camera_info.roi.height;

		CameraInfoRoiWidth = in_ros_data.camera_info.roi.width;

		CameraInfoRoibDoRectify = in_ros_data.camera_info.roi.do_rectify;

		
	}

	void SetROS2(sensor_msgs__srv__SetCameraInfo_Request& out_ros_data) const
	{
    	out_ros_data.camera_info.header.stamp.sec = CameraInfoHeaderStampSec;

		out_ros_data.camera_info.header.stamp.nanosec = CameraInfoHeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *CameraInfoHeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.camera_info.header.frame_id.data != nullptr)
		{
			free(out_ros_data.camera_info.header.frame_id.data);
		}
		out_ros_data.camera_info.header.frame_id.data = (decltype(out_ros_data.camera_info.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.camera_info.header.frame_id.data)));
		memcpy(out_ros_data.camera_info.header.frame_id.data, TCHAR_TO_UTF8(*CameraInfoHeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.camera_info.header.frame_id.size = strLength;
			out_ros_data.camera_info.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.camera_info.height = CameraInfoHeight;

		out_ros_data.camera_info.width = CameraInfoWidth;

		{
			FTCHARToUTF8 strUtf8( *CameraInfoDistortionModel );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.camera_info.distortion_model.data != nullptr)
		{
			free(out_ros_data.camera_info.distortion_model.data);
		}
		out_ros_data.camera_info.distortion_model.data = (decltype(out_ros_data.camera_info.distortion_model.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.camera_info.distortion_model.data)));
		memcpy(out_ros_data.camera_info.distortion_model.data, TCHAR_TO_UTF8(*CameraInfoDistortionModel), (strLength+1)*sizeof(char));
			out_ros_data.camera_info.distortion_model.size = strLength;
			out_ros_data.camera_info.distortion_model.capacity = strLength + 1;
		}

		if (out_ros_data.camera_info.d.data != nullptr)
		{
			free(out_ros_data.camera_info.d.data);
		}
		out_ros_data.camera_info.d.data = (decltype(out_ros_data.camera_info.d.data))malloc((CameraInfoD.Num())*sizeof(decltype(*out_ros_data.camera_info.d.data)));
		
		for (auto i = 0; i < CameraInfoD.Num(); ++i)
		{
			out_ros_data.camera_info.d.data[i] = CameraInfoD[i];
		}

		out_ros_data.camera_info.d.size = CameraInfoD.Num();
		out_ros_data.camera_info.d.capacity = CameraInfoD.Num();

		for (auto i = 0; i < 9; ++i)
		{
			out_ros_data.camera_info.k[i] = CameraInfoK[i];
		}

		for (auto i = 0; i < 9; ++i)
		{
			out_ros_data.camera_info.r[i] = CameraInfoR[i];
		}

		for (auto i = 0; i < 12; ++i)
		{
			out_ros_data.camera_info.p[i] = CameraInfoP[i];
		}

		out_ros_data.camera_info.binning_x = CameraInfoBinningX;

		out_ros_data.camera_info.binning_y = CameraInfoBinningY;

		out_ros_data.camera_info.roi.x_offset = CameraInfoRoiXOffset;

		out_ros_data.camera_info.roi.y_offset = CameraInfoRoiYOffset;

		out_ros_data.camera_info.roi.height = CameraInfoRoiHeight;

		out_ros_data.camera_info.roi.width = CameraInfoRoiWidth;

		out_ros_data.camera_info.roi.do_rectify = CameraInfoRoibDoRectify;

		
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSSetCameraInfoResponse
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool bSuccess = false;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString StatusMessage;

	

	void SetFromROS2(const sensor_msgs__srv__SetCameraInfo_Response& in_ros_data)
	{
    	bSuccess = in_ros_data.success;

		StatusMessage.AppendChars(in_ros_data.status_message.data, in_ros_data.status_message.size);

		
	}

	void SetROS2(sensor_msgs__srv__SetCameraInfo_Response& out_ros_data) const
	{
    	out_ros_data.success = bSuccess;

		{
			FTCHARToUTF8 strUtf8( *StatusMessage );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.status_message.data != nullptr)
		{
			free(out_ros_data.status_message.data);
		}
		out_ros_data.status_message.data = (decltype(out_ros_data.status_message.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.status_message.data)));
		memcpy(out_ros_data.status_message.data, TCHAR_TO_UTF8(*StatusMessage), (strLength+1)*sizeof(char));
			out_ros_data.status_message.size = strLength;
			out_ros_data.status_message.capacity = strLength + 1;
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2SetCameraInfoSrv : public UROS2GenericSrv
{
	GENERATED_BODY()

public:
  	UFUNCTION(BlueprintCallable)
	virtual void Init() override;

  	UFUNCTION(BlueprintCallable)
	virtual void Fini() override;

	virtual const rosidl_service_type_support_t* GetTypeSupport() const override;
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void SetRequest(const FROSSetCameraInfoRequest& Request);
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void GetRequest(FROSSetCameraInfoRequest& Request) const;
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void SetResponse(const FROSSetCameraInfoResponse& Response);
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void GetResponse(FROSSetCameraInfoResponse& Response) const;
	
	virtual void* GetRequest() override;
	virtual void* GetResponse() override;

private:
	virtual FString SrvRequestToString() const override;
	virtual FString SrvResponseToString() const override;

	sensor_msgs__srv__SetCameraInfo_Request SetCameraInfo_req;
	sensor_msgs__srv__SetCameraInfo_Response SetCameraInfo_res;
};