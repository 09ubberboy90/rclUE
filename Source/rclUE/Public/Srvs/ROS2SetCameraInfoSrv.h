// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/SetCameraInfo.srv - do not modify

#pragma once

#include "CoreMinimal.h"

#include "Srvs/ROS2GenericSrv.h"
#include "rclcUtilities.h"
#include "sensor_msgs/srv/set_camera_info.h"

#include "ROS2SetCameraInfoSrv.generated.h"

// potential problem: if this struct is defined multiple times!
USTRUCT(Blueprintable)
struct RCLUE_API FROSSetCameraInfo_Request
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int camera_info_header_stamp_sec;

	unsigned int camera_info_header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString camera_info_header_frame_id;

	unsigned int camera_info_height;

	unsigned int camera_info_width;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString camera_info_distortion_model;

	TArray<double> camera_info_d;

	TArray<double> camera_info_k;

	TArray<double> camera_info_r;

	TArray<double> camera_info_p;

	unsigned int camera_info_binning_x;

	unsigned int camera_info_binning_y;

	unsigned int camera_info_roi_x_offset;

	unsigned int camera_info_roi_y_offset;

	unsigned int camera_info_roi_height;

	unsigned int camera_info_roi_width;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool camera_info_roi_do_rectify;

	

	void SetFromROS2(sensor_msgs__srv__SetCameraInfo_Request rosdata)
	{
    	camera_info_header_stamp_sec = rosdata.camera_info.header.stamp.sec;

		camera_info_header_stamp_nanosec = rosdata.camera_info.header.stamp.nanosec;

		camera_info_header_frame_id.AppendChars(rosdata.camera_info.header.frame_id.data, rosdata.camera_info.header.frame_id.size);

		camera_info_height = rosdata.camera_info.height;

		camera_info_width = rosdata.camera_info.width;

		camera_info_distortion_model.AppendChars(rosdata.camera_info.distortion_model.data, rosdata.camera_info.distortion_model.size);

		for (int i = 0; i < rosdata.camera_info.d.size; i++)
		{
			camera_info_d[i] = rosdata.camera_info.d.data[i];
		}

		for (int i = 0; i < 9; i++)
		{
			camera_info_k[i] = rosdata.camera_info.k[i];
		}

		for (int i = 0; i < 9; i++)
		{
			camera_info_r[i] = rosdata.camera_info.r[i];
		}

		for (int i = 0; i < 12; i++)
		{
			camera_info_p[i] = rosdata.camera_info.p[i];
		}

		camera_info_binning_x = rosdata.camera_info.binning_x;

		camera_info_binning_y = rosdata.camera_info.binning_y;

		camera_info_roi_x_offset = rosdata.camera_info.roi.x_offset;

		camera_info_roi_y_offset = rosdata.camera_info.roi.y_offset;

		camera_info_roi_height = rosdata.camera_info.roi.height;

		camera_info_roi_width = rosdata.camera_info.roi.width;

		camera_info_roi_do_rectify = rosdata.camera_info.roi.do_rectify;

		
	}

	void SetROS2(sensor_msgs__srv__SetCameraInfo_Request& rosdata) const
	{
    	rosdata.camera_info.header.stamp.sec = camera_info_header_stamp_sec;

		rosdata.camera_info.header.stamp.nanosec = camera_info_header_stamp_nanosec;

		if (rosdata.camera_info.header.frame_id.data != nullptr)
		{
			free(rosdata.camera_info.header.frame_id.data);
		}
		rosdata.camera_info.header.frame_id.data = (char*)malloc((camera_info_header_frame_id.Len()+1)*sizeof(char));
		memcpy(rosdata.camera_info.header.frame_id.data, TCHAR_TO_ANSI(*camera_info_header_frame_id), (camera_info_header_frame_id.Len()+1)*sizeof(char));
		rosdata.camera_info.header.frame_id.size = camera_info_header_frame_id.Len();
		rosdata.camera_info.header.frame_id.capacity = camera_info_header_frame_id.Len() + 1;

		rosdata.camera_info.height = camera_info_height;

		rosdata.camera_info.width = camera_info_width;

		if (rosdata.camera_info.distortion_model.data != nullptr)
		{
			free(rosdata.camera_info.distortion_model.data);
		}
		rosdata.camera_info.distortion_model.data = (char*)malloc((camera_info_distortion_model.Len()+1)*sizeof(char));
		memcpy(rosdata.camera_info.distortion_model.data, TCHAR_TO_ANSI(*camera_info_distortion_model), (camera_info_distortion_model.Len()+1)*sizeof(char));
		rosdata.camera_info.distortion_model.size = camera_info_distortion_model.Len();
		rosdata.camera_info.distortion_model.capacity = camera_info_distortion_model.Len() + 1;

		for (int i = 0; i < camera_info_d.Num(); i++)
		{
			rosdata.camera_info.d.data[i] = camera_info_d[i];
		}

		for (int i = 0; i < 9; i++)
		{
			rosdata.camera_info.k[i] = camera_info_k[i];
		}

		for (int i = 0; i < 9; i++)
		{
			rosdata.camera_info.r[i] = camera_info_r[i];
		}

		for (int i = 0; i < 12; i++)
		{
			rosdata.camera_info.p[i] = camera_info_p[i];
		}

		rosdata.camera_info.binning_x = camera_info_binning_x;

		rosdata.camera_info.binning_y = camera_info_binning_y;

		rosdata.camera_info.roi.x_offset = camera_info_roi_x_offset;

		rosdata.camera_info.roi.y_offset = camera_info_roi_y_offset;

		rosdata.camera_info.roi.height = camera_info_roi_height;

		rosdata.camera_info.roi.width = camera_info_roi_width;

		rosdata.camera_info.roi.do_rectify = camera_info_roi_do_rectify;

		
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSSetCameraInfo_Response
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool success;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString status_message;

	

	void SetFromROS2(sensor_msgs__srv__SetCameraInfo_Response rosdata)
	{
    	success = rosdata.success;

		status_message.AppendChars(rosdata.status_message.data, rosdata.status_message.size);

		
	}

	void SetROS2(sensor_msgs__srv__SetCameraInfo_Response& rosdata) const
	{
    	rosdata.success = success;

		if (rosdata.status_message.data != nullptr)
		{
			free(rosdata.status_message.data);
		}
		rosdata.status_message.data = (char*)malloc((status_message.Len()+1)*sizeof(char));
		memcpy(rosdata.status_message.data, TCHAR_TO_ANSI(*status_message), (status_message.Len()+1)*sizeof(char));
		rosdata.status_message.size = status_message.Len();
		rosdata.status_message.capacity = status_message.Len() + 1;

		
	}
};

UCLASS()
class RCLUE_API UROS2SetCameraInfoSrv : public UROS2GenericSrv
{
	GENERATED_BODY()

public:
  	UFUNCTION(BlueprintCallable)
	virtual void Init() override;

  	UFUNCTION(BlueprintCallable)
	virtual void Fini() override;

	virtual const rosidl_service_type_support_t* GetTypeSupport() const override;
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void SetRequest(const FROSSetCameraInfo_Request Request);
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void GetRequest(FROSSetCameraInfo_Request& Request) const;
	
	// used by service
  	UFUNCTION(BlueprintCallable)
	void SetResponse(const FROSSetCameraInfo_Response Response);
	
	// used by client
  	UFUNCTION(BlueprintCallable)
	void GetResponse(FROSSetCameraInfo_Response& Response) const;
	
	virtual void* GetRequest() override;
	virtual void* GetResponse() override;

private:
	virtual FString SrvRequestToString() const override;
	virtual FString SrvResponseToString() const override;

	sensor_msgs__srv__SetCameraInfo_Request SetCameraInfo_req;
	sensor_msgs__srv__SetCameraInfo_Response SetCameraInfo_res;
};