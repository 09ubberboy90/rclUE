// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from tf2_msgs/action/LookupTransform.action - do not modify

#pragma once

#include <CoreMinimal.h>

#include "unique_identifier_msgs/msg/uuid.h"
#include "tf2_msgs/action/lookup_transform.h"
#include "action_msgs/srv/cancel_goal.h"

#include "Actions/ROS2GenericAction.h"
#include "rclcUtilities.h"

#include "ROS2LookupTransformAction.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSLookupTransformSendGoalRequest
{
	GENERATED_BODY()

public:
  	TArray<uint, TFixedAllocator<16>> GoalId;
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TargetFrame;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString SourceFrame;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int SourceTimeSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int SourceTimeNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TimeoutSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int TimeoutNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TargetTimeSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int TargetTimeNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString FixedFrame;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool bAdvanced = false;

	

	void SetFromROS2(const tf2_msgs__action__LookupTransform_SendGoal_Request& in_ros_data)
	{
		for (int i=0; i<16; i++)
		{
			GoalId[i] = in_ros_data.goal_id.uuid[i];
		}

    	TargetFrame.AppendChars(in_ros_data.goal.target_frame.data, in_ros_data.goal.target_frame.size);

		SourceFrame.AppendChars(in_ros_data.goal.source_frame.data, in_ros_data.goal.source_frame.size);

		SourceTimeSec = in_ros_data.goal.source_time.sec;

		SourceTimeNanosec = in_ros_data.goal.source_time.nanosec;

		TimeoutSec = in_ros_data.goal.timeout.sec;

		TimeoutNanosec = in_ros_data.goal.timeout.nanosec;

		TargetTimeSec = in_ros_data.goal.target_time.sec;

		TargetTimeNanosec = in_ros_data.goal.target_time.nanosec;

		FixedFrame.AppendChars(in_ros_data.goal.fixed_frame.data, in_ros_data.goal.fixed_frame.size);

		bAdvanced = in_ros_data.goal.advanced;

		
	}

	void SetROS2(tf2_msgs__action__LookupTransform_SendGoal_Request& out_ros_data) const
	{
		for (int i=0; i<16; i++)
		{
			out_ros_data.goal_id.uuid[i] = GoalId[i];
		}

    	{
			FTCHARToUTF8 strUtf8( *TargetFrame );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.goal.target_frame.data != nullptr)
		{
			free(out_ros_data.goal.target_frame.data);
		}
		out_ros_data.goal.target_frame.data = (decltype(out_ros_data.goal.target_frame.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.goal.target_frame.data)));
		memcpy(out_ros_data.goal.target_frame.data, TCHAR_TO_UTF8(*TargetFrame), (strLength+1)*sizeof(char));
			out_ros_data.goal.target_frame.size = strLength;
			out_ros_data.goal.target_frame.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *SourceFrame );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.goal.source_frame.data != nullptr)
		{
			free(out_ros_data.goal.source_frame.data);
		}
		out_ros_data.goal.source_frame.data = (decltype(out_ros_data.goal.source_frame.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.goal.source_frame.data)));
		memcpy(out_ros_data.goal.source_frame.data, TCHAR_TO_UTF8(*SourceFrame), (strLength+1)*sizeof(char));
			out_ros_data.goal.source_frame.size = strLength;
			out_ros_data.goal.source_frame.capacity = strLength + 1;
		}

		out_ros_data.goal.source_time.sec = SourceTimeSec;

		out_ros_data.goal.source_time.nanosec = SourceTimeNanosec;

		out_ros_data.goal.timeout.sec = TimeoutSec;

		out_ros_data.goal.timeout.nanosec = TimeoutNanosec;

		out_ros_data.goal.target_time.sec = TargetTimeSec;

		out_ros_data.goal.target_time.nanosec = TargetTimeNanosec;

		{
			FTCHARToUTF8 strUtf8( *FixedFrame );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.goal.fixed_frame.data != nullptr)
		{
			free(out_ros_data.goal.fixed_frame.data);
		}
		out_ros_data.goal.fixed_frame.data = (decltype(out_ros_data.goal.fixed_frame.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.goal.fixed_frame.data)));
		memcpy(out_ros_data.goal.fixed_frame.data, TCHAR_TO_UTF8(*FixedFrame), (strLength+1)*sizeof(char));
			out_ros_data.goal.fixed_frame.size = strLength;
			out_ros_data.goal.fixed_frame.capacity = strLength + 1;
		}

		out_ros_data.goal.advanced = bAdvanced;

		
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSLookupTransformSendGoalResponse
{
	GENERATED_BODY()

public:
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    bool bAccepted = false;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    float Stamp = 0.f;

    void SetFromROS2(const tf2_msgs__action__LookupTransform_SendGoal_Response& in_ros_data)
    {
        bAccepted = in_ros_data.accepted;
        Stamp = UROS2Utils::ROSStampToFloat(in_ros_data.stamp);
    }

    void SetROS2(tf2_msgs__action__LookupTransform_SendGoal_Response& out_ros_data) const
    {
        out_ros_data.accepted = bAccepted;
        out_ros_data.stamp = UROS2Utils::FloatToROSStamp(Stamp);
    }
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSLookupTransformGetResultRequest
{
	GENERATED_BODY()

public:
  	TArray<uint, TFixedAllocator<16>> GoalId;

    FROSLookupTransformGetResultRequest()
    {
        GoalId.Init(0, 16);
    }

	void SetFromROS2(const tf2_msgs__action__LookupTransform_GetResult_Request& in_ros_data)
	{
		for (int i=0; i<16; i++)
		{
			GoalId[i] = in_ros_data.goal_id.uuid[i];
		}

	}

	void SetROS2(tf2_msgs__action__LookupTransform_GetResult_Request& out_ros_data) const
	{
		for (int i=0; i<16; i++)
		{
			out_ros_data.goal_id.uuid[i] = GoalId[i];
		}
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSLookupTransformGetResultResponse
{
	GENERATED_BODY()

public:
	int8 Status = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TransformHeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int TransformHeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TransformHeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString TransformChildFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector TransformTransformTranslation = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat TransformTransformRotation = FQuat::Identity;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	uint8 ErrorError = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ErrorErrorString;

	

	void SetFromROS2(const tf2_msgs__action__LookupTransform_GetResult_Response& in_ros_data)
	{
		Status = in_ros_data.status;
    	TransformHeaderStampSec = in_ros_data.result.transform.header.stamp.sec;

		TransformHeaderStampNanosec = in_ros_data.result.transform.header.stamp.nanosec;

		TransformHeaderFrameId.AppendChars(in_ros_data.result.transform.header.frame_id.data, in_ros_data.result.transform.header.frame_id.size);

		TransformChildFrameId.AppendChars(in_ros_data.result.transform.child_frame_id.data, in_ros_data.result.transform.child_frame_id.size);

		TransformTransformTranslation.X = in_ros_data.result.transform.transform.translation.x;
		TransformTransformTranslation.Y = in_ros_data.result.transform.transform.translation.y;
		TransformTransformTranslation.Z = in_ros_data.result.transform.transform.translation.z;

		TransformTransformRotation.X = in_ros_data.result.transform.transform.rotation.x;
		TransformTransformRotation.Y = in_ros_data.result.transform.transform.rotation.y;
		TransformTransformRotation.Z = in_ros_data.result.transform.transform.rotation.z;
		TransformTransformRotation.W = in_ros_data.result.transform.transform.rotation.w;

		ErrorError = in_ros_data.result.error.error;

		ErrorErrorString.AppendChars(in_ros_data.result.error.error_string.data, in_ros_data.result.error.error_string.size);

		
	}

	void SetROS2(tf2_msgs__action__LookupTransform_GetResult_Response& out_ros_data) const
	{
		out_ros_data.status = Status;
    	out_ros_data.result.transform.header.stamp.sec = TransformHeaderStampSec;

		out_ros_data.result.transform.header.stamp.nanosec = TransformHeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *TransformHeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.result.transform.header.frame_id.data != nullptr)
		{
			free(out_ros_data.result.transform.header.frame_id.data);
		}
		out_ros_data.result.transform.header.frame_id.data = (decltype(out_ros_data.result.transform.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.result.transform.header.frame_id.data)));
		memcpy(out_ros_data.result.transform.header.frame_id.data, TCHAR_TO_UTF8(*TransformHeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.result.transform.header.frame_id.size = strLength;
			out_ros_data.result.transform.header.frame_id.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *TransformChildFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.result.transform.child_frame_id.data != nullptr)
		{
			free(out_ros_data.result.transform.child_frame_id.data);
		}
		out_ros_data.result.transform.child_frame_id.data = (decltype(out_ros_data.result.transform.child_frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.result.transform.child_frame_id.data)));
		memcpy(out_ros_data.result.transform.child_frame_id.data, TCHAR_TO_UTF8(*TransformChildFrameId), (strLength+1)*sizeof(char));
			out_ros_data.result.transform.child_frame_id.size = strLength;
			out_ros_data.result.transform.child_frame_id.capacity = strLength + 1;
		}

		out_ros_data.result.transform.transform.translation.x = TransformTransformTranslation.X;
		out_ros_data.result.transform.transform.translation.y = TransformTransformTranslation.Y;
		out_ros_data.result.transform.transform.translation.z = TransformTransformTranslation.Z;

		out_ros_data.result.transform.transform.rotation.x = TransformTransformRotation.X;
		out_ros_data.result.transform.transform.rotation.y = TransformTransformRotation.Y;
		out_ros_data.result.transform.transform.rotation.z = TransformTransformRotation.Z;
		out_ros_data.result.transform.transform.rotation.w = TransformTransformRotation.W;

		out_ros_data.result.error.error = ErrorError;

		{
			FTCHARToUTF8 strUtf8( *ErrorErrorString );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.result.error.error_string.data != nullptr)
		{
			free(out_ros_data.result.error.error_string.data);
		}
		out_ros_data.result.error.error_string.data = (decltype(out_ros_data.result.error.error_string.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.result.error.error_string.data)));
		memcpy(out_ros_data.result.error.error_string.data, TCHAR_TO_UTF8(*ErrorErrorString), (strLength+1)*sizeof(char));
			out_ros_data.result.error.error_string.size = strLength;
			out_ros_data.result.error.error_string.capacity = strLength + 1;
		}

		
	}
};

USTRUCT(Blueprintable)
struct RCLUE_API FROSLookupTransformFeedbackMessage
{
	GENERATED_BODY()

public:
  	TArray<uint, TFixedAllocator<16>> GoalId;
	


    FROSLookupTransformFeedbackMessage()
    {
        GoalId.Init(0, 16);
    }

	void SetFromROS2(const tf2_msgs__action__LookupTransform_FeedbackMessage& in_ros_data)
	{
		for (int i=0; i<16; i++)
		{
			GoalId[i] = in_ros_data.goal_id.uuid[i];
		}

    	
	}

	void SetROS2(tf2_msgs__action__LookupTransform_FeedbackMessage& out_ros_data) const
	{
		for (int i=0; i<16; i++)
		{
			out_ros_data.goal_id.uuid[i] = GoalId[i];
		}
		
    	
	}
};

UCLASS()
class RCLUE_API UROS2LookupTransformAction : public UROS2GenericAction
{
	GENERATED_BODY()
	
public:
	virtual void Init() override;

	virtual void Fini() override;

	virtual const rosidl_action_type_support_t* GetTypeSupport() const override;

  	UFUNCTION(BlueprintCallable)
	void SetGoalRequest(const FROSLookupTransformSendGoalRequest& Goal);

  	UFUNCTION(BlueprintCallable)
	void GetGoalRequest(FROSLookupTransformSendGoalRequest& Goal) const;
	
  	UFUNCTION(BlueprintCallable)
	void SetGoalResponse(const FROSLookupTransformSendGoalResponse& Goal);

  	UFUNCTION(BlueprintCallable)
	void GetGoalResponse(FROSLookupTransformSendGoalResponse& Goal) const;
	
  	UFUNCTION(BlueprintCallable)
	void SetResultRequest(const FROSLookupTransformGetResultRequest& Result);

  	UFUNCTION(BlueprintCallable)
	void GetResultRequest(FROSLookupTransformGetResultRequest& Result) const;
	
  	UFUNCTION(BlueprintCallable)
	void SetResultResponse(const FROSLookupTransformGetResultResponse& Result);

  	UFUNCTION(BlueprintCallable)
	void GetResultResponse(FROSLookupTransformGetResultResponse& Result) const;

  	UFUNCTION(BlueprintCallable)
	void SetFeedback(const FROSLookupTransformFeedbackMessage& Feedback);

  	UFUNCTION(BlueprintCallable)
	void GetFeedback(FROSLookupTransformFeedbackMessage& Feedback) const;
	
  	UFUNCTION(BlueprintCallable)
	void SetGoalIdToFeedback(FROSLookupTransformFeedbackMessage& Feedback);

	virtual void* GetGoalRequest() override;
	virtual void* GetGoalResponse() override;
	virtual void* GetResultRequest() override;
	virtual void* GetResultResponse() override;
	virtual void* GetFeedbackMessage() override;

private:
	tf2_msgs__action__LookupTransform_SendGoal_Request LookupTransform_goal_request;
	tf2_msgs__action__LookupTransform_SendGoal_Response LookupTransform_goal_response;
	tf2_msgs__action__LookupTransform_GetResult_Request LookupTransform_result_request;
	tf2_msgs__action__LookupTransform_GetResult_Response LookupTransform_result_response;
	tf2_msgs__action__LookupTransform_FeedbackMessage LookupTransform_feedback_message;
};