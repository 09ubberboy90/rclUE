// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from geometry_msgs/msg/AccelWithCovariance.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "geometry_msgs/msg/accel_with_covariance.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2AccelWithCovarianceMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSAccelWithCovariance
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector AccelLinear = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector AccelAngular = FVector::ZeroVector;

	UPROPERTY(EditAnywhere)
	TArray<double> Covariance;

	

	void SetFromROS2(const geometry_msgs__msg__AccelWithCovariance& in_ros_data)
	{
    	AccelLinear.X = in_ros_data.accel.linear.x;
		AccelLinear.Y = in_ros_data.accel.linear.y;
		AccelLinear.Z = in_ros_data.accel.linear.z;

		AccelAngular.X = in_ros_data.accel.angular.x;
		AccelAngular.Y = in_ros_data.accel.angular.y;
		AccelAngular.Z = in_ros_data.accel.angular.z;

		for (auto i = 0; i < 36; ++i)
		{
			Covariance.Emplace(in_ros_data.covariance[i]);
		}

		
	}

	void SetROS2(geometry_msgs__msg__AccelWithCovariance& out_ros_data) const
	{
    	out_ros_data.accel.linear.x = AccelLinear.X;
		out_ros_data.accel.linear.y = AccelLinear.Y;
		out_ros_data.accel.linear.z = AccelLinear.Z;

		out_ros_data.accel.angular.x = AccelAngular.X;
		out_ros_data.accel.angular.y = AccelAngular.Y;
		out_ros_data.accel.angular.z = AccelAngular.Z;

		for (auto i = 0; i < 36; ++i)
		{
			out_ros_data.covariance[i] = Covariance[i];
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2AccelWithCovarianceMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSAccelWithCovariance& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSAccelWithCovariance& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	geometry_msgs__msg__AccelWithCovariance accel_with_covariance_msg;
};