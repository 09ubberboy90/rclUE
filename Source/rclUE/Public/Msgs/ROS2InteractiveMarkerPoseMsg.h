// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from visualization_msgs/msg/InteractiveMarkerPose.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "visualization_msgs/msg/interactive_marker_pose.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2InteractiveMarkerPoseMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSInteractiveMarkerPose
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector PosePosition = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat PoseOrientation = FQuat::Identity;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;

	

	void SetFromROS2(const visualization_msgs__msg__InteractiveMarkerPose& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		PosePosition.X = in_ros_data.pose.position.x;
		PosePosition.Y = in_ros_data.pose.position.y;
		PosePosition.Z = in_ros_data.pose.position.z;

		PoseOrientation.X = in_ros_data.pose.orientation.x;
		PoseOrientation.Y = in_ros_data.pose.orientation.y;
		PoseOrientation.Z = in_ros_data.pose.orientation.z;
		PoseOrientation.W = in_ros_data.pose.orientation.w;

		Name.AppendChars(in_ros_data.name.data, in_ros_data.name.size);

		
	}

	void SetROS2(visualization_msgs__msg__InteractiveMarkerPose& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.pose.position.x = PosePosition.X;
		out_ros_data.pose.position.y = PosePosition.Y;
		out_ros_data.pose.position.z = PosePosition.Z;

		out_ros_data.pose.orientation.x = PoseOrientation.X;
		out_ros_data.pose.orientation.y = PoseOrientation.Y;
		out_ros_data.pose.orientation.z = PoseOrientation.Z;
		out_ros_data.pose.orientation.w = PoseOrientation.W;

		{
			FTCHARToUTF8 strUtf8( *Name );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.name.data != nullptr)
		{
			free(out_ros_data.name.data);
		}
		out_ros_data.name.data = (decltype(out_ros_data.name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.name.data)));
		memcpy(out_ros_data.name.data, TCHAR_TO_UTF8(*Name), (strLength+1)*sizeof(char));
			out_ros_data.name.size = strLength;
			out_ros_data.name.capacity = strLength + 1;
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2InteractiveMarkerPoseMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSInteractiveMarkerPose& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSInteractiveMarkerPose& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	visualization_msgs__msg__InteractiveMarkerPose interactive_marker_pose_msg;
};