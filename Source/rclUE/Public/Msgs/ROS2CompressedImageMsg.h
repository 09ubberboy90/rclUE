// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/CompressedImage.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "sensor_msgs/msg/compressed_image.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2CompressedImageMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSCompressedImage
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString format;

	TArray<uint8> data;

	

	void SetFromROS2(const sensor_msgs__msg__CompressedImage& in_ros_data)
	{
    	header_stamp_sec = in_ros_data.header.stamp.sec;

		header_stamp_nanosec = in_ros_data.header.stamp.nanosec;

		header_frame_id.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		format.AppendChars(in_ros_data.format.data, in_ros_data.format.size);

		for (int i = 0; i < in_ros_data.data.size; i++)
		{
			data.Add(in_ros_data.data.data[i]);
		}

		
	}

	void SetROS2(sensor_msgs__msg__CompressedImage& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = header_stamp_sec;

		out_ros_data.header.stamp.nanosec = header_stamp_nanosec;

		{
			FTCHARToUTF8 strUtf8( *header_frame_id );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*header_frame_id), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *format );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.format.data != nullptr)
		{
			free(out_ros_data.format.data);
		}
		out_ros_data.format.data = (decltype(out_ros_data.format.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.format.data)));
		memcpy(out_ros_data.format.data, TCHAR_TO_UTF8(*format), (strLength+1)*sizeof(char));
			out_ros_data.format.size = strLength;
			out_ros_data.format.capacity = strLength + 1;
		}

		if (out_ros_data.data.data != nullptr)
		{
			free(out_ros_data.data.data);
		}
		out_ros_data.data.data = (decltype(out_ros_data.data.data))malloc((data.Num())*sizeof(decltype(*out_ros_data.data.data)));
		
		for (int i = 0; i < data.Num(); i++)
		{
			out_ros_data.data.data[i] = data[i];
		}

		out_ros_data.data.size = data.Num();
		out_ros_data.data.capacity = data.Num();

		
	}
};

UCLASS()
class RCLUE_API UROS2CompressedImageMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSCompressedImage& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSCompressedImage& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__CompressedImage compressed_image_msg;
};