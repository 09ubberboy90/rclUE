// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from trajectory_msgs/msg/MultiDOFJointTrajectoryPoint.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "trajectory_msgs/msg/multi_dof_joint_trajectory_point.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2MultiDOFJointTrajectoryPointMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSMultiDOFJointTrajectoryPoint
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> TransformsTranslation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FQuat> TransformsRotation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> VelocitiesLinear;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> VelocitiesAngular;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> AccelerationsLinear;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> AccelerationsAngular;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int TimeFromStartSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int TimeFromStartNanosec = 0;

	

	void SetFromROS2(const trajectory_msgs__msg__MultiDOFJointTrajectoryPoint& in_ros_data)
	{
    	for (auto i = 0; i < in_ros_data.transforms.size; ++i)
		{
			TransformsTranslation.Emplace(FVector::ZeroVector);
			TransformsTranslation[i].X = in_ros_data.transforms.data[i].translation.x;
			TransformsTranslation[i].Y = in_ros_data.transforms.data[i].translation.y;
			TransformsTranslation[i].Z = in_ros_data.transforms.data[i].translation.z;
		}

		for (auto i = 0; i < in_ros_data.transforms.size; ++i)
		{
			TransformsRotation.Emplace(FQuat::Identity);
			TransformsRotation[i].X = in_ros_data.transforms.data[i].rotation.x;
			TransformsRotation[i].Y = in_ros_data.transforms.data[i].rotation.y;
			TransformsRotation[i].Z = in_ros_data.transforms.data[i].rotation.z;
			TransformsRotation[i].W = in_ros_data.transforms.data[i].rotation.w;
		}

		for (auto i = 0; i < in_ros_data.velocities.size; ++i)
		{
			VelocitiesLinear.Emplace(FVector::ZeroVector);
			VelocitiesLinear[i].X = in_ros_data.velocities.data[i].linear.x;
			VelocitiesLinear[i].Y = in_ros_data.velocities.data[i].linear.y;
			VelocitiesLinear[i].Z = in_ros_data.velocities.data[i].linear.z;
		}

		for (auto i = 0; i < in_ros_data.velocities.size; ++i)
		{
			VelocitiesAngular.Emplace(FVector::ZeroVector);
			VelocitiesAngular[i].X = in_ros_data.velocities.data[i].angular.x;
			VelocitiesAngular[i].Y = in_ros_data.velocities.data[i].angular.y;
			VelocitiesAngular[i].Z = in_ros_data.velocities.data[i].angular.z;
		}

		for (auto i = 0; i < in_ros_data.accelerations.size; ++i)
		{
			AccelerationsLinear.Emplace(FVector::ZeroVector);
			AccelerationsLinear[i].X = in_ros_data.accelerations.data[i].linear.x;
			AccelerationsLinear[i].Y = in_ros_data.accelerations.data[i].linear.y;
			AccelerationsLinear[i].Z = in_ros_data.accelerations.data[i].linear.z;
		}

		for (auto i = 0; i < in_ros_data.accelerations.size; ++i)
		{
			AccelerationsAngular.Emplace(FVector::ZeroVector);
			AccelerationsAngular[i].X = in_ros_data.accelerations.data[i].angular.x;
			AccelerationsAngular[i].Y = in_ros_data.accelerations.data[i].angular.y;
			AccelerationsAngular[i].Z = in_ros_data.accelerations.data[i].angular.z;
		}

		TimeFromStartSec = in_ros_data.time_from_start.sec;

		TimeFromStartNanosec = in_ros_data.time_from_start.nanosec;

		
	}

	void SetROS2(trajectory_msgs__msg__MultiDOFJointTrajectoryPoint& out_ros_data) const
	{
    	if (out_ros_data.transforms.data != nullptr)
		{
			free(out_ros_data.transforms.data);
		}
		out_ros_data.transforms.data = (decltype(out_ros_data.transforms.data))malloc(TransformsTranslation.Num() * (sizeof(TransformsTranslation) + sizeof(TransformsRotation)));
		out_ros_data.transforms.size = TransformsTranslation.Num();
		out_ros_data.transforms.capacity = TransformsTranslation.Num();
		for (auto i = 0; i < TransformsTranslation.Num(); ++i)
		{
			out_ros_data.transforms.data[i].translation.x = TransformsTranslation[i].X;
			out_ros_data.transforms.data[i].translation.y = TransformsTranslation[i].Y;
			out_ros_data.transforms.data[i].translation.z = TransformsTranslation[i].Z;

			out_ros_data.transforms.data[i].rotation.x = TransformsRotation[i].X;
			out_ros_data.transforms.data[i].rotation.y = TransformsRotation[i].Y;
			out_ros_data.transforms.data[i].rotation.z = TransformsRotation[i].Z;
			out_ros_data.transforms.data[i].rotation.w = TransformsRotation[i].W;

			}
	if (out_ros_data.velocities.data != nullptr)
		{
			free(out_ros_data.velocities.data);
		}
		out_ros_data.velocities.data = (decltype(out_ros_data.velocities.data))malloc(VelocitiesLinear.Num() * (sizeof(VelocitiesLinear) + sizeof(VelocitiesAngular)));
		out_ros_data.velocities.size = VelocitiesLinear.Num();
		out_ros_data.velocities.capacity = VelocitiesLinear.Num();
		for (auto i = 0; i < VelocitiesLinear.Num(); ++i)
		{
			out_ros_data.velocities.data[i].linear.x = VelocitiesLinear[i].X;
			out_ros_data.velocities.data[i].linear.y = VelocitiesLinear[i].Y;
			out_ros_data.velocities.data[i].linear.z = VelocitiesLinear[i].Z;

			out_ros_data.velocities.data[i].angular.x = VelocitiesAngular[i].X;
			out_ros_data.velocities.data[i].angular.y = VelocitiesAngular[i].Y;
			out_ros_data.velocities.data[i].angular.z = VelocitiesAngular[i].Z;

			}
	if (out_ros_data.accelerations.data != nullptr)
		{
			free(out_ros_data.accelerations.data);
		}
		out_ros_data.accelerations.data = (decltype(out_ros_data.accelerations.data))malloc(AccelerationsLinear.Num() * (sizeof(AccelerationsLinear) + sizeof(AccelerationsAngular)));
		out_ros_data.accelerations.size = AccelerationsLinear.Num();
		out_ros_data.accelerations.capacity = AccelerationsLinear.Num();
		for (auto i = 0; i < AccelerationsLinear.Num(); ++i)
		{
			out_ros_data.accelerations.data[i].linear.x = AccelerationsLinear[i].X;
			out_ros_data.accelerations.data[i].linear.y = AccelerationsLinear[i].Y;
			out_ros_data.accelerations.data[i].linear.z = AccelerationsLinear[i].Z;

			out_ros_data.accelerations.data[i].angular.x = AccelerationsAngular[i].X;
			out_ros_data.accelerations.data[i].angular.y = AccelerationsAngular[i].Y;
			out_ros_data.accelerations.data[i].angular.z = AccelerationsAngular[i].Z;

			}
	out_ros_data.time_from_start.sec = TimeFromStartSec;

		out_ros_data.time_from_start.nanosec = TimeFromStartNanosec;

		
	}
};

UCLASS()
class RCLUE_API UROS2MultiDOFJointTrajectoryPointMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSMultiDOFJointTrajectoryPoint& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSMultiDOFJointTrajectoryPoint& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	trajectory_msgs__msg__MultiDOFJointTrajectoryPoint multi_dof_joint_trajectory_point_msg;
};