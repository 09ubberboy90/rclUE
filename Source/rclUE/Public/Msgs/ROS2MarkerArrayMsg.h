// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from visualization_msgs/msg/MarkerArray.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "visualization_msgs/msg/marker_array.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2MarkerArrayMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSMarkerArray
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersHeaderStampSec;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> MarkersHeaderStampNanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersHeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersNs;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersAction;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> MarkersPosePosition;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FQuat> MarkersPoseOrientation;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersScaleX;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersScaleY;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersScaleZ;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersColorR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersColorG;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersColorB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersColorA;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersLifetimeSec;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> MarkersLifetimeNanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> MarkersFrameLocked;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersPointsX;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersPointsY;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersPointsZ;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersColorsR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersColorsG;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersColorsB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersColorsA;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersText;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersMeshResource;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> MarkersMeshUseEmbeddedMaterials;

	

	void SetFromROS2(const visualization_msgs__msg__MarkerArray& in_ros_data)
	{
    	for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersHeaderStampSec.Emplace(in_ros_data.markers.data[i].header.stamp.sec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersHeaderStampNanosec.Emplace(in_ros_data.markers.data[i].header.stamp.nanosec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersHeaderFrameId.Emplace("");
			MarkersHeaderFrameId[i].AppendChars(in_ros_data.markers.data[i].header.frame_id.data,in_ros_data.markers.data[i].header.frame_id.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersNs.Emplace("");
			MarkersNs[i].AppendChars(in_ros_data.markers.data[i].ns.data,in_ros_data.markers.data[i].ns.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersId.Emplace(in_ros_data.markers.data[i].id);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersType.Emplace(in_ros_data.markers.data[i].type);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersAction.Emplace(in_ros_data.markers.data[i].action);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersPosePosition.Emplace(FVector::ZeroVector);
			MarkersPosePosition[i].X = in_ros_data.markers.data[i].pose.position.x;
			MarkersPosePosition[i].Y = in_ros_data.markers.data[i].pose.position.y;
			MarkersPosePosition[i].Z = in_ros_data.markers.data[i].pose.position.z;
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersPoseOrientation.Emplace(FQuat::Identity);
			MarkersPoseOrientation[i].X = in_ros_data.markers.data[i].pose.orientation.x;
			MarkersPoseOrientation[i].Y = in_ros_data.markers.data[i].pose.orientation.y;
			MarkersPoseOrientation[i].Z = in_ros_data.markers.data[i].pose.orientation.z;
			MarkersPoseOrientation[i].W = in_ros_data.markers.data[i].pose.orientation.w;
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersScaleX.Emplace(in_ros_data.markers.data[i].scale.x);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersScaleY.Emplace(in_ros_data.markers.data[i].scale.y);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersScaleZ.Emplace(in_ros_data.markers.data[i].scale.z);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersColorR.Emplace(in_ros_data.markers.data[i].color.r);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersColorG.Emplace(in_ros_data.markers.data[i].color.g);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersColorB.Emplace(in_ros_data.markers.data[i].color.b);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersColorA.Emplace(in_ros_data.markers.data[i].color.a);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersLifetimeSec.Emplace(in_ros_data.markers.data[i].lifetime.sec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersLifetimeNanosec.Emplace(in_ros_data.markers.data[i].lifetime.nanosec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersFrameLocked.Emplace(in_ros_data.markers.data[i].frame_locked);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersPointsX.Emplace(in_ros_data.markers.data[i].points.data[i].x);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersPointsY.Emplace(in_ros_data.markers.data[i].points.data[i].y);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersPointsZ.Emplace(in_ros_data.markers.data[i].points.data[i].z);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersColorsR.Emplace(in_ros_data.markers.data[i].colors.data[i].r);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersColorsG.Emplace(in_ros_data.markers.data[i].colors.data[i].g);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersColorsB.Emplace(in_ros_data.markers.data[i].colors.data[i].b);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersColorsA.Emplace(in_ros_data.markers.data[i].colors.data[i].a);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersText.Emplace("");
			MarkersText[i].AppendChars(in_ros_data.markers.data[i].text.data,in_ros_data.markers.data[i].text.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersMeshResource.Emplace("");
			MarkersMeshResource[i].AppendChars(in_ros_data.markers.data[i].mesh_resource.data,in_ros_data.markers.data[i].mesh_resource.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersMeshUseEmbeddedMaterials.Emplace(in_ros_data.markers.data[i].mesh_use_embedded_materials);
		}

		
	}

	void SetROS2(visualization_msgs__msg__MarkerArray& out_ros_data) const
	{
    	if (out_ros_data.markers.data != nullptr)
		{
			free(out_ros_data.markers.data);
		}
		out_ros_data.markers.data = (decltype(out_ros_data.markers.data))malloc(MarkersHeaderStampSec.Num() * (sizeof(MarkersHeaderStampSec) + sizeof(MarkersHeaderStampNanosec) + sizeof(MarkersHeaderFrameId) + sizeof(MarkersNs) + sizeof(MarkersId) + sizeof(MarkersType) + sizeof(MarkersAction) + sizeof(MarkersPosePosition) + sizeof(MarkersPoseOrientation) + sizeof(MarkersScaleX) + sizeof(MarkersScaleY) + sizeof(MarkersScaleZ) + sizeof(MarkersColorR) + sizeof(MarkersColorG) + sizeof(MarkersColorB) + sizeof(MarkersColorA) + sizeof(MarkersLifetimeSec) + sizeof(MarkersLifetimeNanosec) + sizeof(MarkersFrameLocked) + sizeof(MarkersPointsX) + sizeof(MarkersPointsY) + sizeof(MarkersPointsZ) + sizeof(MarkersColorsR) + sizeof(MarkersColorsG) + sizeof(MarkersColorsB) + sizeof(MarkersColorsA) + sizeof(MarkersText) + sizeof(MarkersMeshResource) + sizeof(MarkersMeshUseEmbeddedMaterials)));
		out_ros_data.markers.size = MarkersHeaderStampSec.Num();
		out_ros_data.markers.capacity = MarkersHeaderStampSec.Num();
		for (auto i = 0; i < MarkersHeaderStampSec.Num(); ++i)
		{
			out_ros_data.markers.data[i].header.stamp.sec = MarkersHeaderStampSec[i];

			out_ros_data.markers.data[i].header.stamp.nanosec = MarkersHeaderStampNanosec[i];

			{
				FTCHARToUTF8 strUtf8( *MarkersHeaderFrameId[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].header.frame_id.data = (decltype(out_ros_data.markers.data[i].header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].header.frame_id.data)));
		memcpy(out_ros_data.markers.data[i].header.frame_id.data, TCHAR_TO_UTF8(*MarkersHeaderFrameId[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].header.frame_id.size = strLength;
				out_ros_data.markers.data[i].header.frame_id.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *MarkersNs[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].ns.data = (decltype(out_ros_data.markers.data[i].ns.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].ns.data)));
		memcpy(out_ros_data.markers.data[i].ns.data, TCHAR_TO_UTF8(*MarkersNs[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].ns.size = strLength;
				out_ros_data.markers.data[i].ns.capacity = strLength + 1;
			}

			out_ros_data.markers.data[i].id = MarkersId[i];

			out_ros_data.markers.data[i].type = MarkersType[i];

			out_ros_data.markers.data[i].action = MarkersAction[i];

			out_ros_data.markers.data[i].pose.position.x = MarkersPosePosition[i].X;
			out_ros_data.markers.data[i].pose.position.y = MarkersPosePosition[i].Y;
			out_ros_data.markers.data[i].pose.position.z = MarkersPosePosition[i].Z;

			out_ros_data.markers.data[i].pose.orientation.x = MarkersPoseOrientation[i].X;
			out_ros_data.markers.data[i].pose.orientation.y = MarkersPoseOrientation[i].Y;
			out_ros_data.markers.data[i].pose.orientation.z = MarkersPoseOrientation[i].Z;
			out_ros_data.markers.data[i].pose.orientation.w = MarkersPoseOrientation[i].W;

			out_ros_data.markers.data[i].scale.x = MarkersScaleX[i];

			out_ros_data.markers.data[i].scale.y = MarkersScaleY[i];

			out_ros_data.markers.data[i].scale.z = MarkersScaleZ[i];

			out_ros_data.markers.data[i].color.r = MarkersColorR[i];

			out_ros_data.markers.data[i].color.g = MarkersColorG[i];

			out_ros_data.markers.data[i].color.b = MarkersColorB[i];

			out_ros_data.markers.data[i].color.a = MarkersColorA[i];

			out_ros_data.markers.data[i].lifetime.sec = MarkersLifetimeSec[i];

			out_ros_data.markers.data[i].lifetime.nanosec = MarkersLifetimeNanosec[i];

			out_ros_data.markers.data[i].frame_locked = MarkersFrameLocked[i];

			out_ros_data.markers.data[i].points.data[i].x = MarkersPointsX[i];

			out_ros_data.markers.data[i].points.data[i].y = MarkersPointsY[i];

			out_ros_data.markers.data[i].points.data[i].z = MarkersPointsZ[i];

			out_ros_data.markers.data[i].colors.data[i].r = MarkersColorsR[i];

			out_ros_data.markers.data[i].colors.data[i].g = MarkersColorsG[i];

			out_ros_data.markers.data[i].colors.data[i].b = MarkersColorsB[i];

			out_ros_data.markers.data[i].colors.data[i].a = MarkersColorsA[i];

			{
				FTCHARToUTF8 strUtf8( *MarkersText[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].text.data = (decltype(out_ros_data.markers.data[i].text.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].text.data)));
		memcpy(out_ros_data.markers.data[i].text.data, TCHAR_TO_UTF8(*MarkersText[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].text.size = strLength;
				out_ros_data.markers.data[i].text.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *MarkersMeshResource[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].mesh_resource.data = (decltype(out_ros_data.markers.data[i].mesh_resource.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].mesh_resource.data)));
		memcpy(out_ros_data.markers.data[i].mesh_resource.data, TCHAR_TO_UTF8(*MarkersMeshResource[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].mesh_resource.size = strLength;
				out_ros_data.markers.data[i].mesh_resource.capacity = strLength + 1;
			}

			out_ros_data.markers.data[i].mesh_use_embedded_materials = MarkersMeshUseEmbeddedMaterials[i];

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2MarkerArrayMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSMarkerArray& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSMarkerArray& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	visualization_msgs__msg__MarkerArray marker_array_msg;
};