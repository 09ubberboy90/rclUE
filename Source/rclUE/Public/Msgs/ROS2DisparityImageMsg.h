// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from stereo_msgs/msg/DisparityImage.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "stereo_msgs/msg/disparity_image.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2DisparityImageMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSDisparityImage
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int ImageHeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int ImageHeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ImageHeaderFrameId;

	UPROPERTY(EditAnywhere)
	unsigned int ImageHeight = 0;

	UPROPERTY(EditAnywhere)
	unsigned int ImageWidth = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ImageEncoding;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	uint8 ImageIsBigendian = 0;

	UPROPERTY(EditAnywhere)
	unsigned int ImageStep = 0;

	UPROPERTY(EditAnywhere)
	TArray<uint8> ImageData;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float F = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float T = 0.f;

	UPROPERTY(EditAnywhere)
	unsigned int ValidWindowXOffset = 0;

	UPROPERTY(EditAnywhere)
	unsigned int ValidWindowYOffset = 0;

	UPROPERTY(EditAnywhere)
	unsigned int ValidWindowHeight = 0;

	UPROPERTY(EditAnywhere)
	unsigned int ValidWindowWidth = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool ValidWindowbDoRectify = false;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float MinDisparity = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float MaxDisparity = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float DeltaD = 0.f;

	

	void SetFromROS2(const stereo_msgs__msg__DisparityImage& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		ImageHeaderStampSec = in_ros_data.image.header.stamp.sec;

		ImageHeaderStampNanosec = in_ros_data.image.header.stamp.nanosec;

		ImageHeaderFrameId.AppendChars(in_ros_data.image.header.frame_id.data, in_ros_data.image.header.frame_id.size);

		ImageHeight = in_ros_data.image.height;

		ImageWidth = in_ros_data.image.width;

		ImageEncoding.AppendChars(in_ros_data.image.encoding.data, in_ros_data.image.encoding.size);

		ImageIsBigendian = in_ros_data.image.is_bigendian;

		ImageStep = in_ros_data.image.step;

		for (auto i = 0; i < in_ros_data.image.data.size; ++i)
		{
			ImageData.Emplace(in_ros_data.image.data.data[i]);
		}

		F = in_ros_data.f;

		T = in_ros_data.t;

		ValidWindowXOffset = in_ros_data.valid_window.x_offset;

		ValidWindowYOffset = in_ros_data.valid_window.y_offset;

		ValidWindowHeight = in_ros_data.valid_window.height;

		ValidWindowWidth = in_ros_data.valid_window.width;

		ValidWindowbDoRectify = in_ros_data.valid_window.do_rectify;

		MinDisparity = in_ros_data.min_disparity;

		MaxDisparity = in_ros_data.max_disparity;

		DeltaD = in_ros_data.delta_d;

		
	}

	void SetROS2(stereo_msgs__msg__DisparityImage& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.image.header.stamp.sec = ImageHeaderStampSec;

		out_ros_data.image.header.stamp.nanosec = ImageHeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *ImageHeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.image.header.frame_id.data != nullptr)
		{
			free(out_ros_data.image.header.frame_id.data);
		}
		out_ros_data.image.header.frame_id.data = (decltype(out_ros_data.image.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.image.header.frame_id.data)));
		memcpy(out_ros_data.image.header.frame_id.data, TCHAR_TO_UTF8(*ImageHeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.image.header.frame_id.size = strLength;
			out_ros_data.image.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.image.height = ImageHeight;

		out_ros_data.image.width = ImageWidth;

		{
			FTCHARToUTF8 strUtf8( *ImageEncoding );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.image.encoding.data != nullptr)
		{
			free(out_ros_data.image.encoding.data);
		}
		out_ros_data.image.encoding.data = (decltype(out_ros_data.image.encoding.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.image.encoding.data)));
		memcpy(out_ros_data.image.encoding.data, TCHAR_TO_UTF8(*ImageEncoding), (strLength+1)*sizeof(char));
			out_ros_data.image.encoding.size = strLength;
			out_ros_data.image.encoding.capacity = strLength + 1;
		}

		out_ros_data.image.is_bigendian = ImageIsBigendian;

		out_ros_data.image.step = ImageStep;

		if (out_ros_data.image.data.data != nullptr)
		{
			free(out_ros_data.image.data.data);
		}
		out_ros_data.image.data.data = (decltype(out_ros_data.image.data.data))malloc((ImageData.Num())*sizeof(decltype(*out_ros_data.image.data.data)));
		
		for (auto i = 0; i < ImageData.Num(); ++i)
		{
			out_ros_data.image.data.data[i] = ImageData[i];
		}

		out_ros_data.image.data.size = ImageData.Num();
		out_ros_data.image.data.capacity = ImageData.Num();

		out_ros_data.f = F;

		out_ros_data.t = T;

		out_ros_data.valid_window.x_offset = ValidWindowXOffset;

		out_ros_data.valid_window.y_offset = ValidWindowYOffset;

		out_ros_data.valid_window.height = ValidWindowHeight;

		out_ros_data.valid_window.width = ValidWindowWidth;

		out_ros_data.valid_window.do_rectify = ValidWindowbDoRectify;

		out_ros_data.min_disparity = MinDisparity;

		out_ros_data.max_disparity = MaxDisparity;

		out_ros_data.delta_d = DeltaD;

		
	}
};

UCLASS()
class RCLUE_API UROS2DisparityImageMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSDisparityImage& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSDisparityImage& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	stereo_msgs__msg__DisparityImage disparity_image_msg;
};