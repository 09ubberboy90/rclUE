// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from ue_msgs/EntityState.msg - do not modify

#pragma once

#include "CoreMinimal.h"

#include "ue_msgs/msg/entity_state.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2EntityStateMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSEntityState
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString name;

	double pose_position_x;

	double pose_position_y;

	double pose_position_z;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat pose_orientation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector twist_linear;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector twist_angular;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString reference_frame;

	

	void SetFromROS2(ue_msgs__msg__EntityState rosdata)
	{
    	name.AppendChars(rosdata.name.data, rosdata.name.size);

		pose_position_x = rosdata.pose.position.x;

		pose_position_y = rosdata.pose.position.y;

		pose_position_z = rosdata.pose.position.z;

		pose_orientation.X = rosdata.pose.orientation.x;
		pose_orientation.Y = rosdata.pose.orientation.y;
		pose_orientation.Z = rosdata.pose.orientation.z;
		pose_orientation.W = rosdata.pose.orientation.w;

		twist_linear.X = rosdata.twist.linear.x;
		twist_linear.Y = rosdata.twist.linear.y;
		twist_linear.Z = rosdata.twist.linear.z;

		twist_angular.X = rosdata.twist.angular.x;
		twist_angular.Y = rosdata.twist.angular.y;
		twist_angular.Z = rosdata.twist.angular.z;

		reference_frame.AppendChars(rosdata.reference_frame.data, rosdata.reference_frame.size);

		
	}

	void SetROS2(ue_msgs__msg__EntityState& rosdata) const
	{
    	if (rosdata.name.data != nullptr)
		{
			free(rosdata.name.data);
		}
		rosdata.name.data = (decltype(rosdata.name.data))malloc((name.Len() + 1)*sizeof(decltype(*rosdata.name.data)));
		memcpy(rosdata.name.data, TCHAR_TO_ANSI(*name), (name.Len()+1)*sizeof(char));
		rosdata.name.size = name.Len();
		rosdata.name.capacity = name.Len() + 1;

		rosdata.pose.position.x = pose_position_x;

		rosdata.pose.position.y = pose_position_y;

		rosdata.pose.position.z = pose_position_z;

		rosdata.pose.orientation.x = pose_orientation.X;
		rosdata.pose.orientation.y = pose_orientation.Y;
		rosdata.pose.orientation.z = pose_orientation.Z;
		rosdata.pose.orientation.w = pose_orientation.W;

		rosdata.twist.linear.x = twist_linear.X;
		rosdata.twist.linear.y = twist_linear.Y;
		rosdata.twist.linear.z = twist_linear.Z;

		rosdata.twist.angular.x = twist_angular.X;
		rosdata.twist.angular.y = twist_angular.Y;
		rosdata.twist.angular.z = twist_angular.Z;

		if (rosdata.reference_frame.data != nullptr)
		{
			free(rosdata.reference_frame.data);
		}
		rosdata.reference_frame.data = (decltype(rosdata.reference_frame.data))malloc((reference_frame.Len() + 1)*sizeof(decltype(*rosdata.reference_frame.data)));
		memcpy(rosdata.reference_frame.data, TCHAR_TO_ANSI(*reference_frame), (reference_frame.Len()+1)*sizeof(char));
		rosdata.reference_frame.size = reference_frame.Len();
		rosdata.reference_frame.capacity = reference_frame.Len() + 1;

		
	}
};

UCLASS()
class RCLUE_API UROS2EntityStateMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSEntityState Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSEntityState& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	ue_msgs__msg__EntityState entity_state_msg;
};