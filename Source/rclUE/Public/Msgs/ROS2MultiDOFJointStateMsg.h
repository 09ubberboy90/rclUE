// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/MultiDOFJointState.msg - do not modify

#pragma once

#include "CoreMinimal.h"

#include "sensor_msgs/msg/multi_dof_joint_state.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2MultiDOFJointStateMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSMultiDOFJointState
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> joint_names;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> transforms_translation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FQuat> transforms_rotation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> twist_linear;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> twist_angular;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> wrench_force;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> wrench_torque;

	

	void SetFromROS2(sensor_msgs__msg__MultiDOFJointState rosdata)
	{
    	header_stamp_sec = rosdata.header.stamp.sec;

		header_stamp_nanosec = rosdata.header.stamp.nanosec;

		header_frame_id.AppendChars(rosdata.header.frame_id.data, rosdata.header.frame_id.size);

		for (int i = 0; i < rosdata.joint_names.size; i++)
		{
			joint_names[i].AppendChars(rosdata.joint_names.data[i].data,rosdata.joint_names.data[i].size);
		}

		for (int i = 0; i < rosdata.transforms.size; i++)
		{
			transforms_translation[i].X = rosdata.transforms.data[i].translation.x;
			transforms_translation[i].Y = rosdata.transforms.data[i].translation.y;
			transforms_translation[i].Z = rosdata.transforms.data[i].translation.z;
		}

		for (int i = 0; i < rosdata.transforms.size; i++)
		{
			transforms_rotation[i].X = rosdata.transforms.data[i].rotation.x;
			transforms_rotation[i].Y = rosdata.transforms.data[i].rotation.y;
			transforms_rotation[i].Z = rosdata.transforms.data[i].rotation.z;
			transforms_rotation[i].W = rosdata.transforms.data[i].rotation.w;
		}

		for (int i = 0; i < rosdata.twist.size; i++)
		{
			twist_linear[i].X = rosdata.twist.data[i].linear.x;
			twist_linear[i].Y = rosdata.twist.data[i].linear.y;
			twist_linear[i].Z = rosdata.twist.data[i].linear.z;
		}

		for (int i = 0; i < rosdata.twist.size; i++)
		{
			twist_angular[i].X = rosdata.twist.data[i].angular.x;
			twist_angular[i].Y = rosdata.twist.data[i].angular.y;
			twist_angular[i].Z = rosdata.twist.data[i].angular.z;
		}

		for (int i = 0; i < rosdata.wrench.size; i++)
		{
			wrench_force[i].X = rosdata.wrench.data[i].force.x;
			wrench_force[i].Y = rosdata.wrench.data[i].force.y;
			wrench_force[i].Z = rosdata.wrench.data[i].force.z;
		}

		for (int i = 0; i < rosdata.wrench.size; i++)
		{
			wrench_torque[i].X = rosdata.wrench.data[i].torque.x;
			wrench_torque[i].Y = rosdata.wrench.data[i].torque.y;
			wrench_torque[i].Z = rosdata.wrench.data[i].torque.z;
		}

		
	}

	void SetROS2(sensor_msgs__msg__MultiDOFJointState& rosdata) const
	{
    	rosdata.header.stamp.sec = header_stamp_sec;

		rosdata.header.stamp.nanosec = header_stamp_nanosec;

		if (rosdata.header.frame_id.data != nullptr)
		{
			free(rosdata.header.frame_id.data);
		}
		rosdata.header.frame_id.data = (char*)malloc((header_frame_id.Len()+1)*sizeof(char));
		memcpy(rosdata.header.frame_id.data, TCHAR_TO_ANSI(*header_frame_id), (header_frame_id.Len()+1)*sizeof(char));
		rosdata.header.frame_id.size = header_frame_id.Len();
		rosdata.header.frame_id.capacity = header_frame_id.Len() + 1;

		for (int i = 0; i < joint_names.Num(); i++)
		{
			if (rosdata.joint_names.data[i].data != nullptr)
			{
				free(rosdata.joint_names.data[i].data);
			}
			rosdata.joint_names.data[i].data = (char*)malloc((joint_names[i].Len()+1)*sizeof(char));
			memcpy(rosdata.joint_names.data[i].data, TCHAR_TO_ANSI(*joint_names[i]), (joint_names[i].Len()+1)*sizeof(char));
			rosdata.joint_names.data[i].size = joint_names[i].Len();
			rosdata.joint_names.data[i].capacity = joint_names[i].Len() + 1;
		}

		for (int i = 0; i < transforms_translation.Num(); i++)
		{
			rosdata.transforms.data[i].translation.x = transforms_translation[i].X;
			rosdata.transforms.data[i].translation.y = transforms_translation[i].Y;
			rosdata.transforms.data[i].translation.z = transforms_translation[i].Z;
		}

		for (int i = 0; i < transforms_rotation.Num(); i++)
		{
			rosdata.transforms.data[i].rotation.x = transforms_rotation[i].X;
			rosdata.transforms.data[i].rotation.y = transforms_rotation[i].Y;
			rosdata.transforms.data[i].rotation.z = transforms_rotation[i].Z;
			rosdata.transforms.data[i].rotation.w = transforms_rotation[i].W;
		}

		for (int i = 0; i < twist_linear.Num(); i++)
		{
			rosdata.twist.data[i].linear.x = twist_linear[i].X;
			rosdata.twist.data[i].linear.y = twist_linear[i].Y;
			rosdata.twist.data[i].linear.z = twist_linear[i].Z;
		}

		for (int i = 0; i < twist_angular.Num(); i++)
		{
			rosdata.twist.data[i].angular.x = twist_angular[i].X;
			rosdata.twist.data[i].angular.y = twist_angular[i].Y;
			rosdata.twist.data[i].angular.z = twist_angular[i].Z;
		}

		for (int i = 0; i < wrench_force.Num(); i++)
		{
			rosdata.wrench.data[i].force.x = wrench_force[i].X;
			rosdata.wrench.data[i].force.y = wrench_force[i].Y;
			rosdata.wrench.data[i].force.z = wrench_force[i].Z;
		}

		for (int i = 0; i < wrench_torque.Num(); i++)
		{
			rosdata.wrench.data[i].torque.x = wrench_torque[i].X;
			rosdata.wrench.data[i].torque.y = wrench_torque[i].Y;
			rosdata.wrench.data[i].torque.z = wrench_torque[i].Z;
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2MultiDOFJointStateMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSMultiDOFJointState Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSMultiDOFJointState& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__MultiDOFJointState multi_dof_joint_state_msg;
};