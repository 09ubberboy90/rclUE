// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/msg/MultiDOFJointState.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "sensor_msgs/msg/multi_dof_joint_state.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2MultiDOFJointStateMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSMultiDOFJointState
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> JointNames;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> TransformsTranslation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FQuat> TransformsRotation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> TwistLinear;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> TwistAngular;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> WrenchForce;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> WrenchTorque;

	

	void SetFromROS2(const sensor_msgs__msg__MultiDOFJointState& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		for (auto i = 0; i < in_ros_data.joint_names.size; ++i)
		{
			JointNames.Emplace("");
			JointNames[i].AppendChars(in_ros_data.joint_names.data[i].data,in_ros_data.joint_names.data[i].size);
		}

		for (auto i = 0; i < in_ros_data.transforms.size; ++i)
		{
			TransformsTranslation.Emplace(FVector::ZeroVector);
			TransformsTranslation[i].X = in_ros_data.transforms.data[i].translation.x;
			TransformsTranslation[i].Y = in_ros_data.transforms.data[i].translation.y;
			TransformsTranslation[i].Z = in_ros_data.transforms.data[i].translation.z;
		}

		for (auto i = 0; i < in_ros_data.transforms.size; ++i)
		{
			TransformsRotation.Emplace(FQuat::Identity);
			TransformsRotation[i].X = in_ros_data.transforms.data[i].rotation.x;
			TransformsRotation[i].Y = in_ros_data.transforms.data[i].rotation.y;
			TransformsRotation[i].Z = in_ros_data.transforms.data[i].rotation.z;
			TransformsRotation[i].W = in_ros_data.transforms.data[i].rotation.w;
		}

		for (auto i = 0; i < in_ros_data.twist.size; ++i)
		{
			TwistLinear.Emplace(FVector::ZeroVector);
			TwistLinear[i].X = in_ros_data.twist.data[i].linear.x;
			TwistLinear[i].Y = in_ros_data.twist.data[i].linear.y;
			TwistLinear[i].Z = in_ros_data.twist.data[i].linear.z;
		}

		for (auto i = 0; i < in_ros_data.twist.size; ++i)
		{
			TwistAngular.Emplace(FVector::ZeroVector);
			TwistAngular[i].X = in_ros_data.twist.data[i].angular.x;
			TwistAngular[i].Y = in_ros_data.twist.data[i].angular.y;
			TwistAngular[i].Z = in_ros_data.twist.data[i].angular.z;
		}

		for (auto i = 0; i < in_ros_data.wrench.size; ++i)
		{
			WrenchForce.Emplace(FVector::ZeroVector);
			WrenchForce[i].X = in_ros_data.wrench.data[i].force.x;
			WrenchForce[i].Y = in_ros_data.wrench.data[i].force.y;
			WrenchForce[i].Z = in_ros_data.wrench.data[i].force.z;
		}

		for (auto i = 0; i < in_ros_data.wrench.size; ++i)
		{
			WrenchTorque.Emplace(FVector::ZeroVector);
			WrenchTorque[i].X = in_ros_data.wrench.data[i].torque.x;
			WrenchTorque[i].Y = in_ros_data.wrench.data[i].torque.y;
			WrenchTorque[i].Z = in_ros_data.wrench.data[i].torque.z;
		}

		
	}

	void SetROS2(sensor_msgs__msg__MultiDOFJointState& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		if (out_ros_data.joint_names.data != nullptr)
		{
			free(out_ros_data.joint_names.data);
		}
		out_ros_data.joint_names.data = (decltype(out_ros_data.joint_names.data))malloc((JointNames.Num())*sizeof(decltype(*out_ros_data.joint_names.data)));
		for (auto i = 0; i < JointNames.Num(); ++i)
		{
			{
				FTCHARToUTF8 strUtf8( *JointNames[i] );
				int32 strLength = strUtf8.Length();
				if (out_ros_data.joint_names.data[i].data != nullptr)
				{
					free(out_ros_data.joint_names.data[i].data);
				}
				out_ros_data.joint_names.data[i].data = (char*)malloc((strLength+1)*sizeof(char));
				memcpy(out_ros_data.joint_names.data[i].data, TCHAR_TO_UTF8(*JointNames[i]), (strLength+1)*sizeof(char));
				out_ros_data.joint_names.data[i].size = strLength;
				out_ros_data.joint_names.data[i].capacity = strLength + 1;
			}
		}

		if (out_ros_data.transforms.data != nullptr)
		{
			free(out_ros_data.transforms.data);
		}
		out_ros_data.transforms.data = (decltype(out_ros_data.transforms.data))malloc(TransformsTranslation.Num() * (sizeof(TransformsTranslation) + sizeof(TransformsRotation)));
		out_ros_data.transforms.size = TransformsTranslation.Num();
		out_ros_data.transforms.capacity = TransformsTranslation.Num();
		for (auto i = 0; i < TransformsTranslation.Num(); ++i)
		{
			out_ros_data.transforms.data[i].translation.x = TransformsTranslation[i].X;
			out_ros_data.transforms.data[i].translation.y = TransformsTranslation[i].Y;
			out_ros_data.transforms.data[i].translation.z = TransformsTranslation[i].Z;

			out_ros_data.transforms.data[i].rotation.x = TransformsRotation[i].X;
			out_ros_data.transforms.data[i].rotation.y = TransformsRotation[i].Y;
			out_ros_data.transforms.data[i].rotation.z = TransformsRotation[i].Z;
			out_ros_data.transforms.data[i].rotation.w = TransformsRotation[i].W;

			}
	if (out_ros_data.twist.data != nullptr)
		{
			free(out_ros_data.twist.data);
		}
		out_ros_data.twist.data = (decltype(out_ros_data.twist.data))malloc(TwistLinear.Num() * (sizeof(TwistLinear) + sizeof(TwistAngular)));
		out_ros_data.twist.size = TwistLinear.Num();
		out_ros_data.twist.capacity = TwistLinear.Num();
		for (auto i = 0; i < TwistLinear.Num(); ++i)
		{
			out_ros_data.twist.data[i].linear.x = TwistLinear[i].X;
			out_ros_data.twist.data[i].linear.y = TwistLinear[i].Y;
			out_ros_data.twist.data[i].linear.z = TwistLinear[i].Z;

			out_ros_data.twist.data[i].angular.x = TwistAngular[i].X;
			out_ros_data.twist.data[i].angular.y = TwistAngular[i].Y;
			out_ros_data.twist.data[i].angular.z = TwistAngular[i].Z;

			}
	if (out_ros_data.wrench.data != nullptr)
		{
			free(out_ros_data.wrench.data);
		}
		out_ros_data.wrench.data = (decltype(out_ros_data.wrench.data))malloc(WrenchForce.Num() * (sizeof(WrenchForce) + sizeof(WrenchTorque)));
		out_ros_data.wrench.size = WrenchForce.Num();
		out_ros_data.wrench.capacity = WrenchForce.Num();
		for (auto i = 0; i < WrenchForce.Num(); ++i)
		{
			out_ros_data.wrench.data[i].force.x = WrenchForce[i].X;
			out_ros_data.wrench.data[i].force.y = WrenchForce[i].Y;
			out_ros_data.wrench.data[i].force.z = WrenchForce[i].Z;

			out_ros_data.wrench.data[i].torque.x = WrenchTorque[i].X;
			out_ros_data.wrench.data[i].torque.y = WrenchTorque[i].Y;
			out_ros_data.wrench.data[i].torque.z = WrenchTorque[i].Z;

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2MultiDOFJointStateMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSMultiDOFJointState& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSMultiDOFJointState& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__MultiDOFJointState multi_dof_joint_state_msg;
};