// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/Imu.msg - do not modify

#pragma once

#include "CoreMinimal.h"

#include "sensor_msgs/msg/imu.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2ImuMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSImu
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	double orientation_x;

	double orientation_y;

	double orientation_z;

	double orientation_w;

	TArray<double> orientation_covariance;

	double angular_velocity_x;

	double angular_velocity_y;

	double angular_velocity_z;

	TArray<double> angular_velocity_covariance;

	double linear_acceleration_x;

	double linear_acceleration_y;

	double linear_acceleration_z;

	TArray<double> linear_acceleration_covariance;

	

	void SetFromROS2(sensor_msgs__msg__Imu rosdata)
	{
    	header_stamp_sec = rosdata.header.stamp.sec;

		header_stamp_nanosec = rosdata.header.stamp.nanosec;

		header_frame_id.AppendChars(rosdata.header.frame_id.data, rosdata.header.frame_id.size);

		orientation_x = rosdata.orientation.x;

		orientation_y = rosdata.orientation.y;

		orientation_z = rosdata.orientation.z;

		orientation_w = rosdata.orientation.w;

		for (int i = 0; i < 9; i++)
		{
			orientation_covariance[i] = rosdata.orientation_covariance[i];
		}

		angular_velocity_x = rosdata.angular_velocity.x;

		angular_velocity_y = rosdata.angular_velocity.y;

		angular_velocity_z = rosdata.angular_velocity.z;

		for (int i = 0; i < 9; i++)
		{
			angular_velocity_covariance[i] = rosdata.angular_velocity_covariance[i];
		}

		linear_acceleration_x = rosdata.linear_acceleration.x;

		linear_acceleration_y = rosdata.linear_acceleration.y;

		linear_acceleration_z = rosdata.linear_acceleration.z;

		for (int i = 0; i < 9; i++)
		{
			linear_acceleration_covariance[i] = rosdata.linear_acceleration_covariance[i];
		}

		
	}

	void SetROS2(sensor_msgs__msg__Imu& rosdata) const
	{
    	rosdata.header.stamp.sec = header_stamp_sec;

		rosdata.header.stamp.nanosec = header_stamp_nanosec;

		if (rosdata.header.frame_id.data != nullptr)
		{
			free(rosdata.header.frame_id.data);
		}
		rosdata.header.frame_id.data = (decltype(rosdata.header.frame_id.data))malloc((header_frame_id.Len() + 1)*sizeof(decltype(*rosdata.header.frame_id.data)));
		memcpy(rosdata.header.frame_id.data, TCHAR_TO_ANSI(*header_frame_id), (header_frame_id.Len()+1)*sizeof(char));
		rosdata.header.frame_id.size = header_frame_id.Len();
		rosdata.header.frame_id.capacity = header_frame_id.Len() + 1;

		rosdata.orientation.x = orientation_x;

		rosdata.orientation.y = orientation_y;

		rosdata.orientation.z = orientation_z;

		rosdata.orientation.w = orientation_w;

		for (int i = 0; i < 9; i++)
		{
			rosdata.orientation_covariance[i] = orientation_covariance[i];
		}

		rosdata.angular_velocity.x = angular_velocity_x;

		rosdata.angular_velocity.y = angular_velocity_y;

		rosdata.angular_velocity.z = angular_velocity_z;

		for (int i = 0; i < 9; i++)
		{
			rosdata.angular_velocity_covariance[i] = angular_velocity_covariance[i];
		}

		rosdata.linear_acceleration.x = linear_acceleration_x;

		rosdata.linear_acceleration.y = linear_acceleration_y;

		rosdata.linear_acceleration.z = linear_acceleration_z;

		for (int i = 0; i < 9; i++)
		{
			rosdata.linear_acceleration_covariance[i] = linear_acceleration_covariance[i];
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2ImuMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSImu Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSImu& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__Imu imu_msg;
};