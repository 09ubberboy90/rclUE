// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/CameraInfo.msg - do not modify

#pragma once

#include "CoreMinimal.h"

#include "sensor_msgs/msg/camera_info.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2CameraInfoMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSCameraInfo
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	unsigned int height;

	unsigned int width;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString distortion_model;

	TArray<double> d;

	TArray<double> k;

	TArray<double> r;

	TArray<double> p;

	unsigned int binning_x;

	unsigned int binning_y;

	unsigned int roi_x_offset;

	unsigned int roi_y_offset;

	unsigned int roi_height;

	unsigned int roi_width;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool roi_do_rectify;

	

	void SetFromROS2(sensor_msgs__msg__CameraInfo rosdata)
	{
    	header_stamp_sec = rosdata.header.stamp.sec;

		header_stamp_nanosec = rosdata.header.stamp.nanosec;

		header_frame_id.AppendChars(rosdata.header.frame_id.data, rosdata.header.frame_id.size);

		height = rosdata.height;

		width = rosdata.width;

		distortion_model.AppendChars(rosdata.distortion_model.data, rosdata.distortion_model.size);

		for (int i = 0; i < rosdata.d.size; i++)
		{
			d[i] = rosdata.d.data[i];
		}

		for (int i = 0; i < 9; i++)
		{
			k[i] = rosdata.k[i];
		}

		for (int i = 0; i < 9; i++)
		{
			r[i] = rosdata.r[i];
		}

		for (int i = 0; i < 12; i++)
		{
			p[i] = rosdata.p[i];
		}

		binning_x = rosdata.binning_x;

		binning_y = rosdata.binning_y;

		roi_x_offset = rosdata.roi.x_offset;

		roi_y_offset = rosdata.roi.y_offset;

		roi_height = rosdata.roi.height;

		roi_width = rosdata.roi.width;

		roi_do_rectify = rosdata.roi.do_rectify;

		
	}

	void SetROS2(sensor_msgs__msg__CameraInfo& rosdata) const
	{
    	rosdata.header.stamp.sec = header_stamp_sec;

		rosdata.header.stamp.nanosec = header_stamp_nanosec;

		if (rosdata.header.frame_id.data != nullptr)
		{
			free(rosdata.header.frame_id.data);
		}
		rosdata.header.frame_id.data = (char*)malloc((header_frame_id.Len()+1)*sizeof(char));
		memcpy(rosdata.header.frame_id.data, TCHAR_TO_ANSI(*header_frame_id), (header_frame_id.Len()+1)*sizeof(char));
		rosdata.header.frame_id.size = header_frame_id.Len();
		rosdata.header.frame_id.capacity = header_frame_id.Len() + 1;

		rosdata.height = height;

		rosdata.width = width;

		if (rosdata.distortion_model.data != nullptr)
		{
			free(rosdata.distortion_model.data);
		}
		rosdata.distortion_model.data = (char*)malloc((distortion_model.Len()+1)*sizeof(char));
		memcpy(rosdata.distortion_model.data, TCHAR_TO_ANSI(*distortion_model), (distortion_model.Len()+1)*sizeof(char));
		rosdata.distortion_model.size = distortion_model.Len();
		rosdata.distortion_model.capacity = distortion_model.Len() + 1;

		for (int i = 0; i < d.Num(); i++)
		{
			rosdata.d.data[i] = d[i];
		}

		for (int i = 0; i < 9; i++)
		{
			rosdata.k[i] = k[i];
		}

		for (int i = 0; i < 9; i++)
		{
			rosdata.r[i] = r[i];
		}

		for (int i = 0; i < 12; i++)
		{
			rosdata.p[i] = p[i];
		}

		rosdata.binning_x = binning_x;

		rosdata.binning_y = binning_y;

		rosdata.roi.x_offset = roi_x_offset;

		rosdata.roi.y_offset = roi_y_offset;

		rosdata.roi.height = roi_height;

		rosdata.roi.width = roi_width;

		rosdata.roi.do_rectify = roi_do_rectify;

		
	}
};

UCLASS()
class RCLUE_API UROS2CameraInfoMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSCameraInfo Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSCameraInfo& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__CameraInfo camera_info_msg;
};