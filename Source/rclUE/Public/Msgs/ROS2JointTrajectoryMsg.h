// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from trajectory_msgs/msg/JointTrajectory.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "trajectory_msgs/msg/joint_trajectory.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2JointTrajectoryMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSJointTrajectory
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> JointNames;

	UPROPERTY(EditAnywhere)
	TArray<double> PointsPositions;

	UPROPERTY(EditAnywhere)
	TArray<double> PointsVelocities;

	UPROPERTY(EditAnywhere)
	TArray<double> PointsAccelerations;

	UPROPERTY(EditAnywhere)
	TArray<double> PointsEffort;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PointsTimeFromStartSec;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> PointsTimeFromStartNanosec;

	

	void SetFromROS2(const trajectory_msgs__msg__JointTrajectory& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		for (auto i = 0; i < in_ros_data.joint_names.size; ++i)
		{
			JointNames.Emplace("");
			JointNames[i].AppendChars(in_ros_data.joint_names.data[i].data,in_ros_data.joint_names.data[i].size);
		}

		for (auto i = 0; i < in_ros_data.points.size; ++i)
		{
			PointsPositions.Emplace(in_ros_data.points.data[i].positions.data[i]);
		}

		for (auto i = 0; i < in_ros_data.points.size; ++i)
		{
			PointsVelocities.Emplace(in_ros_data.points.data[i].velocities.data[i]);
		}

		for (auto i = 0; i < in_ros_data.points.size; ++i)
		{
			PointsAccelerations.Emplace(in_ros_data.points.data[i].accelerations.data[i]);
		}

		for (auto i = 0; i < in_ros_data.points.size; ++i)
		{
			PointsEffort.Emplace(in_ros_data.points.data[i].effort.data[i]);
		}

		for (auto i = 0; i < in_ros_data.points.size; ++i)
		{
			PointsTimeFromStartSec.Emplace(in_ros_data.points.data[i].time_from_start.sec);
		}

		for (auto i = 0; i < in_ros_data.points.size; ++i)
		{
			PointsTimeFromStartNanosec.Emplace(in_ros_data.points.data[i].time_from_start.nanosec);
		}

		
	}

	void SetROS2(trajectory_msgs__msg__JointTrajectory& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		if (out_ros_data.joint_names.data != nullptr)
		{
			free(out_ros_data.joint_names.data);
		}
		out_ros_data.joint_names.data = (decltype(out_ros_data.joint_names.data))malloc((JointNames.Num())*sizeof(decltype(*out_ros_data.joint_names.data)));
		for (auto i = 0; i < JointNames.Num(); ++i)
		{
			{
				FTCHARToUTF8 strUtf8( *JointNames[i] );
				int32 strLength = strUtf8.Length();
				if (out_ros_data.joint_names.data[i].data != nullptr)
				{
					free(out_ros_data.joint_names.data[i].data);
				}
				out_ros_data.joint_names.data[i].data = (char*)malloc((strLength+1)*sizeof(char));
				memcpy(out_ros_data.joint_names.data[i].data, TCHAR_TO_UTF8(*JointNames[i]), (strLength+1)*sizeof(char));
				out_ros_data.joint_names.data[i].size = strLength;
				out_ros_data.joint_names.data[i].capacity = strLength + 1;
			}
		}

		if (out_ros_data.points.data != nullptr)
		{
			free(out_ros_data.points.data);
		}
		out_ros_data.points.data = (decltype(out_ros_data.points.data))malloc(PointsPositions.Num() * (sizeof(PointsPositions) + sizeof(PointsVelocities) + sizeof(PointsAccelerations) + sizeof(PointsEffort) + sizeof(PointsTimeFromStartSec) + sizeof(PointsTimeFromStartNanosec)));
		out_ros_data.points.size = PointsPositions.Num();
		out_ros_data.points.capacity = PointsPositions.Num();
		for (auto i = 0; i < PointsPositions.Num(); ++i)
		{
			out_ros_data.points.data[i].positions.data[i] = PointsPositions[i];

			out_ros_data.points.data[i].velocities.data[i] = PointsVelocities[i];

			out_ros_data.points.data[i].accelerations.data[i] = PointsAccelerations[i];

			out_ros_data.points.data[i].effort.data[i] = PointsEffort[i];

			out_ros_data.points.data[i].time_from_start.sec = PointsTimeFromStartSec[i];

			out_ros_data.points.data[i].time_from_start.nanosec = PointsTimeFromStartNanosec[i];

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2JointTrajectoryMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSJointTrajectory& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSJointTrajectory& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	trajectory_msgs__msg__JointTrajectory joint_trajectory_msg;
};