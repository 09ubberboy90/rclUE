// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/BatteryState.msg - do not modify

#pragma once

#include "CoreMinimal.h"

#include "sensor_msgs/msg/battery_state.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2BatteryStateMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSBatteryState
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float voltage;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float temperature;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float current;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float charge;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float capacity;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float design_capacity;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float percentage;

	uint8 power_supply_status;

	uint8 power_supply_health;

	uint8 power_supply_technology;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool present;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> cell_voltage;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> cell_temperature;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString location;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString serial_number;

	

	void SetFromROS2(sensor_msgs__msg__BatteryState rosdata)
	{
    	header_stamp_sec = rosdata.header.stamp.sec;

		header_stamp_nanosec = rosdata.header.stamp.nanosec;

		header_frame_id.AppendChars(rosdata.header.frame_id.data, rosdata.header.frame_id.size);

		voltage = rosdata.voltage;

		temperature = rosdata.temperature;

		current = rosdata.current;

		charge = rosdata.charge;

		capacity = rosdata.capacity;

		design_capacity = rosdata.design_capacity;

		percentage = rosdata.percentage;

		power_supply_status = rosdata.power_supply_status;

		power_supply_health = rosdata.power_supply_health;

		power_supply_technology = rosdata.power_supply_technology;

		present = rosdata.present;

		for (int i = 0; i < rosdata.cell_voltage.size; i++)
		{
			cell_voltage[i] = rosdata.cell_voltage.data[i];
		}

		for (int i = 0; i < rosdata.cell_temperature.size; i++)
		{
			cell_temperature[i] = rosdata.cell_temperature.data[i];
		}

		location.AppendChars(rosdata.location.data, rosdata.location.size);

		serial_number.AppendChars(rosdata.serial_number.data, rosdata.serial_number.size);

		
	}

	void SetROS2(sensor_msgs__msg__BatteryState& rosdata) const
	{
    	rosdata.header.stamp.sec = header_stamp_sec;

		rosdata.header.stamp.nanosec = header_stamp_nanosec;

		if (rosdata.header.frame_id.data != nullptr)
		{
			free(rosdata.header.frame_id.data);
		}
		rosdata.header.frame_id.data = (char*)malloc((header_frame_id.Len()+1)*sizeof(char));
		memcpy(rosdata.header.frame_id.data, TCHAR_TO_ANSI(*header_frame_id), (header_frame_id.Len()+1)*sizeof(char));
		rosdata.header.frame_id.size = header_frame_id.Len();
		rosdata.header.frame_id.capacity = header_frame_id.Len() + 1;

		rosdata.voltage = voltage;

		rosdata.temperature = temperature;

		rosdata.current = current;

		rosdata.charge = charge;

		rosdata.capacity = capacity;

		rosdata.design_capacity = design_capacity;

		rosdata.percentage = percentage;

		rosdata.power_supply_status = power_supply_status;

		rosdata.power_supply_health = power_supply_health;

		rosdata.power_supply_technology = power_supply_technology;

		rosdata.present = present;

		for (int i = 0; i < cell_voltage.Num(); i++)
		{
			rosdata.cell_voltage.data[i] = cell_voltage[i];
		}

		for (int i = 0; i < cell_temperature.Num(); i++)
		{
			rosdata.cell_temperature.data[i] = cell_temperature[i];
		}

		if (rosdata.location.data != nullptr)
		{
			free(rosdata.location.data);
		}
		rosdata.location.data = (char*)malloc((location.Len()+1)*sizeof(char));
		memcpy(rosdata.location.data, TCHAR_TO_ANSI(*location), (location.Len()+1)*sizeof(char));
		rosdata.location.size = location.Len();
		rosdata.location.capacity = location.Len() + 1;

		if (rosdata.serial_number.data != nullptr)
		{
			free(rosdata.serial_number.data);
		}
		rosdata.serial_number.data = (char*)malloc((serial_number.Len()+1)*sizeof(char));
		memcpy(rosdata.serial_number.data, TCHAR_TO_ANSI(*serial_number), (serial_number.Len()+1)*sizeof(char));
		rosdata.serial_number.size = serial_number.Len();
		rosdata.serial_number.capacity = serial_number.Len() + 1;

		
	}
};

UCLASS()
class RCLUE_API UROS2BatteryStateMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSBatteryState Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSBatteryState& Output);
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__BatteryState battery_state_msg;
};