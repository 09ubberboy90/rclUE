// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from geometry_msgs/msg/PoseWithCovarianceStamped.msg - do not modify

#pragma once

#include "Msgs/ROS2GenericMsg.h"
#include "Msgs/ROS2HeaderMsg.h"
#include "geometry_msgs/msg/pose_with_covariance_stamped.h"
#include "rclcUtilities.h"

#include <CoreMinimal.h>

#include "ROS2PoseWithCovarianceStampedMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSPoseWithCovarianceStamped
{
    GENERATED_BODY()

public:
    FROSPoseWithCovarianceStamped()
    {
        PoseCovariance.SetNumZeroed(36);
    }
    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FROSHeader Header;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FVector PosePosePosition = FVector::ZeroVector;

    UPROPERTY(EditAnywhere, BlueprintReadWrite)
    FQuat PosePoseOrientation = FQuat::Identity;

    UPROPERTY(EditAnywhere)
    TArray<double> PoseCovariance;

    void SetFromROS2(const geometry_msgs__msg__PoseWithCovarianceStamped& in_ros_data)
    {
        Header.SetFromROS2(in_ros_data.header);

        PosePosePosition.X = in_ros_data.pose.pose.position.x;
        PosePosePosition.Y = in_ros_data.pose.pose.position.y;
        PosePosePosition.Z = in_ros_data.pose.pose.position.z;

        PosePoseOrientation.X = in_ros_data.pose.pose.orientation.x;
        PosePoseOrientation.Y = in_ros_data.pose.pose.orientation.y;
        PosePoseOrientation.Z = in_ros_data.pose.pose.orientation.z;
        PosePoseOrientation.W = in_ros_data.pose.pose.orientation.w;

        for (auto i = 0; i < 36; ++i)
        {
            PoseCovariance[i] = in_ros_data.pose.covariance[i];
        }
    }

    void SetROS2(geometry_msgs__msg__PoseWithCovarianceStamped& out_ros_data) const
    {
        Header.SetROS2(out_ros_data.header);
        out_ros_data.pose.pose.position.x = PosePosePosition.X;
        out_ros_data.pose.pose.position.y = PosePosePosition.Y;
        out_ros_data.pose.pose.position.z = PosePosePosition.Z;

        out_ros_data.pose.pose.orientation.x = PosePoseOrientation.X;
        out_ros_data.pose.pose.orientation.y = PosePoseOrientation.Y;
        out_ros_data.pose.pose.orientation.z = PosePoseOrientation.Z;
        out_ros_data.pose.pose.orientation.w = PosePoseOrientation.W;

        for (auto i = 0; i < 36; ++i)
        {
            out_ros_data.pose.covariance[i] = PoseCovariance[i];
        }
    }
};

UCLASS()
class RCLUE_API UROS2PoseWithCovarianceStampedMsg : public UROS2GenericMsg
{
    GENERATED_BODY()

public:
    virtual void Init() override;
    virtual void Fini() override;

    virtual const rosidl_message_type_support_t* GetTypeSupport() const override;

    UFUNCTION(BlueprintCallable)
    void SetMsg(const FROSPoseWithCovarianceStamped& Input);

    UFUNCTION(BlueprintCallable)
    void GetMsg(FROSPoseWithCovarianceStamped& Output) const;

    virtual void* Get() override;

private:
    virtual FString MsgToString() const override;

    geometry_msgs__msg__PoseWithCovarianceStamped pose_with_covariance_stamped_msg;
};
