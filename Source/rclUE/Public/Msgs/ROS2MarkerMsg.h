// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from visualization_msgs/msg/Marker.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "visualization_msgs/msg/marker.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2MarkerMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSMarker
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Ns;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Id = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Type = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int Action = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector PosePosition = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat PoseOrientation = FQuat::Identity;

	UPROPERTY(EditAnywhere)
	double ScaleX = 0.f;

	UPROPERTY(EditAnywhere)
	double ScaleY = 0.f;

	UPROPERTY(EditAnywhere)
	double ScaleZ = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float ColorR = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float ColorG = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float ColorB = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float ColorA = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int LifetimeSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int LifetimeNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool bFrameLocked = false;

	UPROPERTY(EditAnywhere)
	TArray<double> PointsX;

	UPROPERTY(EditAnywhere)
	TArray<double> PointsY;

	UPROPERTY(EditAnywhere)
	TArray<double> PointsZ;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ColorsR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ColorsG;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ColorsB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ColorsA;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Text;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString MeshResource;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool bMeshUseEmbeddedMaterials = false;

	

	void SetFromROS2(const visualization_msgs__msg__Marker& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		Ns.AppendChars(in_ros_data.ns.data, in_ros_data.ns.size);

		Id = in_ros_data.id;

		Type = in_ros_data.type;

		Action = in_ros_data.action;

		PosePosition.X = in_ros_data.pose.position.x;
		PosePosition.Y = in_ros_data.pose.position.y;
		PosePosition.Z = in_ros_data.pose.position.z;

		PoseOrientation.X = in_ros_data.pose.orientation.x;
		PoseOrientation.Y = in_ros_data.pose.orientation.y;
		PoseOrientation.Z = in_ros_data.pose.orientation.z;
		PoseOrientation.W = in_ros_data.pose.orientation.w;

		ScaleX = in_ros_data.scale.x;

		ScaleY = in_ros_data.scale.y;

		ScaleZ = in_ros_data.scale.z;

		ColorR = in_ros_data.color.r;

		ColorG = in_ros_data.color.g;

		ColorB = in_ros_data.color.b;

		ColorA = in_ros_data.color.a;

		LifetimeSec = in_ros_data.lifetime.sec;

		LifetimeNanosec = in_ros_data.lifetime.nanosec;

		bFrameLocked = in_ros_data.frame_locked;

		for (auto i = 0; i < in_ros_data.points.size; ++i)
		{
			PointsX.Emplace(in_ros_data.points.data[i].x);
		}

		for (auto i = 0; i < in_ros_data.points.size; ++i)
		{
			PointsY.Emplace(in_ros_data.points.data[i].y);
		}

		for (auto i = 0; i < in_ros_data.points.size; ++i)
		{
			PointsZ.Emplace(in_ros_data.points.data[i].z);
		}

		for (auto i = 0; i < in_ros_data.colors.size; ++i)
		{
			ColorsR.Emplace(in_ros_data.colors.data[i].r);
		}

		for (auto i = 0; i < in_ros_data.colors.size; ++i)
		{
			ColorsG.Emplace(in_ros_data.colors.data[i].g);
		}

		for (auto i = 0; i < in_ros_data.colors.size; ++i)
		{
			ColorsB.Emplace(in_ros_data.colors.data[i].b);
		}

		for (auto i = 0; i < in_ros_data.colors.size; ++i)
		{
			ColorsA.Emplace(in_ros_data.colors.data[i].a);
		}

		Text.AppendChars(in_ros_data.text.data, in_ros_data.text.size);

		MeshResource.AppendChars(in_ros_data.mesh_resource.data, in_ros_data.mesh_resource.size);

		bMeshUseEmbeddedMaterials = in_ros_data.mesh_use_embedded_materials;

		
	}

	void SetROS2(visualization_msgs__msg__Marker& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *Ns );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.ns.data != nullptr)
		{
			free(out_ros_data.ns.data);
		}
		out_ros_data.ns.data = (decltype(out_ros_data.ns.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.ns.data)));
		memcpy(out_ros_data.ns.data, TCHAR_TO_UTF8(*Ns), (strLength+1)*sizeof(char));
			out_ros_data.ns.size = strLength;
			out_ros_data.ns.capacity = strLength + 1;
		}

		out_ros_data.id = Id;

		out_ros_data.type = Type;

		out_ros_data.action = Action;

		out_ros_data.pose.position.x = PosePosition.X;
		out_ros_data.pose.position.y = PosePosition.Y;
		out_ros_data.pose.position.z = PosePosition.Z;

		out_ros_data.pose.orientation.x = PoseOrientation.X;
		out_ros_data.pose.orientation.y = PoseOrientation.Y;
		out_ros_data.pose.orientation.z = PoseOrientation.Z;
		out_ros_data.pose.orientation.w = PoseOrientation.W;

		out_ros_data.scale.x = ScaleX;

		out_ros_data.scale.y = ScaleY;

		out_ros_data.scale.z = ScaleZ;

		out_ros_data.color.r = ColorR;

		out_ros_data.color.g = ColorG;

		out_ros_data.color.b = ColorB;

		out_ros_data.color.a = ColorA;

		out_ros_data.lifetime.sec = LifetimeSec;

		out_ros_data.lifetime.nanosec = LifetimeNanosec;

		out_ros_data.frame_locked = bFrameLocked;

		if (out_ros_data.points.data != nullptr)
		{
			free(out_ros_data.points.data);
		}
		out_ros_data.points.data = (decltype(out_ros_data.points.data))malloc(PointsX.Num() * (sizeof(PointsX) + sizeof(PointsY) + sizeof(PointsZ)));
		out_ros_data.points.size = PointsX.Num();
		out_ros_data.points.capacity = PointsX.Num();
		for (auto i = 0; i < PointsX.Num(); ++i)
		{
			out_ros_data.points.data[i].x = PointsX[i];

			out_ros_data.points.data[i].y = PointsY[i];

			out_ros_data.points.data[i].z = PointsZ[i];

			}
	if (out_ros_data.colors.data != nullptr)
		{
			free(out_ros_data.colors.data);
		}
		out_ros_data.colors.data = (decltype(out_ros_data.colors.data))malloc(ColorsR.Num() * (sizeof(ColorsR) + sizeof(ColorsG) + sizeof(ColorsB) + sizeof(ColorsA)));
		out_ros_data.colors.size = ColorsR.Num();
		out_ros_data.colors.capacity = ColorsR.Num();
		for (auto i = 0; i < ColorsR.Num(); ++i)
		{
			out_ros_data.colors.data[i].r = ColorsR[i];

			out_ros_data.colors.data[i].g = ColorsG[i];

			out_ros_data.colors.data[i].b = ColorsB[i];

			out_ros_data.colors.data[i].a = ColorsA[i];

			}
	{
			FTCHARToUTF8 strUtf8( *Text );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.text.data != nullptr)
		{
			free(out_ros_data.text.data);
		}
		out_ros_data.text.data = (decltype(out_ros_data.text.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.text.data)));
		memcpy(out_ros_data.text.data, TCHAR_TO_UTF8(*Text), (strLength+1)*sizeof(char));
			out_ros_data.text.size = strLength;
			out_ros_data.text.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *MeshResource );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.mesh_resource.data != nullptr)
		{
			free(out_ros_data.mesh_resource.data);
		}
		out_ros_data.mesh_resource.data = (decltype(out_ros_data.mesh_resource.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.mesh_resource.data)));
		memcpy(out_ros_data.mesh_resource.data, TCHAR_TO_UTF8(*MeshResource), (strLength+1)*sizeof(char));
			out_ros_data.mesh_resource.size = strLength;
			out_ros_data.mesh_resource.capacity = strLength + 1;
		}

		out_ros_data.mesh_use_embedded_materials = bMeshUseEmbeddedMaterials;

		
	}
};

UCLASS()
class RCLUE_API UROS2MarkerMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSMarker& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSMarker& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	visualization_msgs__msg__Marker marker_msg;
};