// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from visualization_msgs/msg/InteractiveMarkerInit.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "visualization_msgs/msg/interactive_marker_init.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2InteractiveMarkerInitMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSInteractiveMarkerInit
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ServerId;

	UPROPERTY(EditAnywhere)
	uint64 SeqNum = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersHeaderStampSec;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> MarkersHeaderStampNanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersHeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> MarkersPosePosition;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FQuat> MarkersPoseOrientation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersName;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersDescription;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersScale;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> MarkersMenuEntriesId;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> MarkersMenuEntriesParentId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersMenuEntriesTitle;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersMenuEntriesCommand;

	UPROPERTY(EditAnywhere)
	TArray<uint8> MarkersMenuEntriesCommandType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersControlsName;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsOrientationX;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsOrientationY;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsOrientationZ;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsOrientationW;

	UPROPERTY(EditAnywhere)
	TArray<uint8> MarkersControlsOrientationMode;

	UPROPERTY(EditAnywhere)
	TArray<uint8> MarkersControlsInteractionMode;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> MarkersControlsAlwaysVisible;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersControlsMarkersHeaderStampSec;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> MarkersControlsMarkersHeaderStampNanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersControlsMarkersHeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersControlsMarkersNs;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersControlsMarkersId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersControlsMarkersType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersControlsMarkersAction;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> MarkersControlsMarkersPosePosition;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FQuat> MarkersControlsMarkersPoseOrientation;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsMarkersScaleX;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsMarkersScaleY;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsMarkersScaleZ;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersControlsMarkersColorR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersControlsMarkersColorG;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersControlsMarkersColorB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersControlsMarkersColorA;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> MarkersControlsMarkersLifetimeSec;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> MarkersControlsMarkersLifetimeNanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> MarkersControlsMarkersFrameLocked;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsMarkersPointsX;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsMarkersPointsY;

	UPROPERTY(EditAnywhere)
	TArray<double> MarkersControlsMarkersPointsZ;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersControlsMarkersColorsR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersControlsMarkersColorsG;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersControlsMarkersColorsB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> MarkersControlsMarkersColorsA;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersControlsMarkersText;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersControlsMarkersMeshResource;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> MarkersControlsMarkersMeshUseEmbeddedMaterials;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> MarkersControlsIndependentMarkerOrientation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MarkersControlsDescription;

	

	void SetFromROS2(const visualization_msgs__msg__InteractiveMarkerInit& in_ros_data)
	{
    	ServerId.AppendChars(in_ros_data.server_id.data, in_ros_data.server_id.size);

		SeqNum = in_ros_data.seq_num;

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersHeaderStampSec.Emplace(in_ros_data.markers.data[i].header.stamp.sec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersHeaderStampNanosec.Emplace(in_ros_data.markers.data[i].header.stamp.nanosec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersHeaderFrameId.Emplace("");
			MarkersHeaderFrameId[i].AppendChars(in_ros_data.markers.data[i].header.frame_id.data,in_ros_data.markers.data[i].header.frame_id.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersPosePosition.Emplace(FVector::ZeroVector);
			MarkersPosePosition[i].X = in_ros_data.markers.data[i].pose.position.x;
			MarkersPosePosition[i].Y = in_ros_data.markers.data[i].pose.position.y;
			MarkersPosePosition[i].Z = in_ros_data.markers.data[i].pose.position.z;
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersPoseOrientation.Emplace(FQuat::Identity);
			MarkersPoseOrientation[i].X = in_ros_data.markers.data[i].pose.orientation.x;
			MarkersPoseOrientation[i].Y = in_ros_data.markers.data[i].pose.orientation.y;
			MarkersPoseOrientation[i].Z = in_ros_data.markers.data[i].pose.orientation.z;
			MarkersPoseOrientation[i].W = in_ros_data.markers.data[i].pose.orientation.w;
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersName.Emplace("");
			MarkersName[i].AppendChars(in_ros_data.markers.data[i].name.data,in_ros_data.markers.data[i].name.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersDescription.Emplace("");
			MarkersDescription[i].AppendChars(in_ros_data.markers.data[i].description.data,in_ros_data.markers.data[i].description.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersScale.Emplace(in_ros_data.markers.data[i].scale);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersMenuEntriesId.Emplace(in_ros_data.markers.data[i].menu_entries.data[i].id);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersMenuEntriesParentId.Emplace(in_ros_data.markers.data[i].menu_entries.data[i].parent_id);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersMenuEntriesTitle.Emplace("");
			MarkersMenuEntriesTitle[i].AppendChars(in_ros_data.markers.data[i].menu_entries.data[i].title.data,in_ros_data.markers.data[i].menu_entries.data[i].title.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersMenuEntriesCommand.Emplace("");
			MarkersMenuEntriesCommand[i].AppendChars(in_ros_data.markers.data[i].menu_entries.data[i].command.data,in_ros_data.markers.data[i].menu_entries.data[i].command.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersMenuEntriesCommandType.Emplace(in_ros_data.markers.data[i].menu_entries.data[i].command_type);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsName.Emplace("");
			MarkersControlsName[i].AppendChars(in_ros_data.markers.data[i].controls.data[i].name.data,in_ros_data.markers.data[i].controls.data[i].name.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsOrientationX.Emplace(in_ros_data.markers.data[i].controls.data[i].orientation.x);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsOrientationY.Emplace(in_ros_data.markers.data[i].controls.data[i].orientation.y);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsOrientationZ.Emplace(in_ros_data.markers.data[i].controls.data[i].orientation.z);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsOrientationW.Emplace(in_ros_data.markers.data[i].controls.data[i].orientation.w);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsOrientationMode.Emplace(in_ros_data.markers.data[i].controls.data[i].orientation_mode);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsInteractionMode.Emplace(in_ros_data.markers.data[i].controls.data[i].interaction_mode);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsAlwaysVisible.Emplace(in_ros_data.markers.data[i].controls.data[i].always_visible);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersHeaderStampSec.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].header.stamp.sec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersHeaderStampNanosec.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].header.stamp.nanosec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersHeaderFrameId.Emplace("");
			MarkersControlsMarkersHeaderFrameId[i].AppendChars(in_ros_data.markers.data[i].controls.data[i].markers.data[i].header.frame_id.data,in_ros_data.markers.data[i].controls.data[i].markers.data[i].header.frame_id.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersNs.Emplace("");
			MarkersControlsMarkersNs[i].AppendChars(in_ros_data.markers.data[i].controls.data[i].markers.data[i].ns.data,in_ros_data.markers.data[i].controls.data[i].markers.data[i].ns.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersId.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].id);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersType.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].type);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersAction.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].action);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersPosePosition.Emplace(FVector::ZeroVector);
			MarkersControlsMarkersPosePosition[i].X = in_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.position.x;
			MarkersControlsMarkersPosePosition[i].Y = in_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.position.y;
			MarkersControlsMarkersPosePosition[i].Z = in_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.position.z;
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersPoseOrientation.Emplace(FQuat::Identity);
			MarkersControlsMarkersPoseOrientation[i].X = in_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.orientation.x;
			MarkersControlsMarkersPoseOrientation[i].Y = in_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.orientation.y;
			MarkersControlsMarkersPoseOrientation[i].Z = in_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.orientation.z;
			MarkersControlsMarkersPoseOrientation[i].W = in_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.orientation.w;
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersScaleX.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].scale.x);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersScaleY.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].scale.y);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersScaleZ.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].scale.z);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersColorR.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].color.r);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersColorG.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].color.g);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersColorB.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].color.b);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersColorA.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].color.a);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersLifetimeSec.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].lifetime.sec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersLifetimeNanosec.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].lifetime.nanosec);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersFrameLocked.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].frame_locked);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersPointsX.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].points.data[i].x);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersPointsY.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].points.data[i].y);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersPointsZ.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].points.data[i].z);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersColorsR.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].colors.data[i].r);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersColorsG.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].colors.data[i].g);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersColorsB.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].colors.data[i].b);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersColorsA.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].colors.data[i].a);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersText.Emplace("");
			MarkersControlsMarkersText[i].AppendChars(in_ros_data.markers.data[i].controls.data[i].markers.data[i].text.data,in_ros_data.markers.data[i].controls.data[i].markers.data[i].text.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersMeshResource.Emplace("");
			MarkersControlsMarkersMeshResource[i].AppendChars(in_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_resource.data,in_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_resource.size);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsMarkersMeshUseEmbeddedMaterials.Emplace(in_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_use_embedded_materials);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsIndependentMarkerOrientation.Emplace(in_ros_data.markers.data[i].controls.data[i].independent_marker_orientation);
		}

		for (auto i = 0; i < in_ros_data.markers.size; ++i)
		{
			MarkersControlsDescription.Emplace("");
			MarkersControlsDescription[i].AppendChars(in_ros_data.markers.data[i].controls.data[i].description.data,in_ros_data.markers.data[i].controls.data[i].description.size);
		}

		
	}

	void SetROS2(visualization_msgs__msg__InteractiveMarkerInit& out_ros_data) const
	{
    	{
			FTCHARToUTF8 strUtf8( *ServerId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.server_id.data != nullptr)
		{
			free(out_ros_data.server_id.data);
		}
		out_ros_data.server_id.data = (decltype(out_ros_data.server_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.server_id.data)));
		memcpy(out_ros_data.server_id.data, TCHAR_TO_UTF8(*ServerId), (strLength+1)*sizeof(char));
			out_ros_data.server_id.size = strLength;
			out_ros_data.server_id.capacity = strLength + 1;
		}

		out_ros_data.seq_num = SeqNum;

		if (out_ros_data.markers.data != nullptr)
		{
			free(out_ros_data.markers.data);
		}
		out_ros_data.markers.data = (decltype(out_ros_data.markers.data))malloc(MarkersHeaderStampSec.Num() * (sizeof(MarkersHeaderStampSec) + sizeof(MarkersHeaderStampNanosec) + sizeof(MarkersHeaderFrameId) + sizeof(MarkersPosePosition) + sizeof(MarkersPoseOrientation) + sizeof(MarkersName) + sizeof(MarkersDescription) + sizeof(MarkersScale) + sizeof(MarkersMenuEntriesId) + sizeof(MarkersMenuEntriesParentId) + sizeof(MarkersMenuEntriesTitle) + sizeof(MarkersMenuEntriesCommand) + sizeof(MarkersMenuEntriesCommandType) + sizeof(MarkersControlsName) + sizeof(MarkersControlsOrientationX) + sizeof(MarkersControlsOrientationY) + sizeof(MarkersControlsOrientationZ) + sizeof(MarkersControlsOrientationW) + sizeof(MarkersControlsOrientationMode) + sizeof(MarkersControlsInteractionMode) + sizeof(MarkersControlsAlwaysVisible) + sizeof(MarkersControlsMarkersHeaderStampSec) + sizeof(MarkersControlsMarkersHeaderStampNanosec) + sizeof(MarkersControlsMarkersHeaderFrameId) + sizeof(MarkersControlsMarkersNs) + sizeof(MarkersControlsMarkersId) + sizeof(MarkersControlsMarkersType) + sizeof(MarkersControlsMarkersAction) + sizeof(MarkersControlsMarkersPosePosition) + sizeof(MarkersControlsMarkersPoseOrientation) + sizeof(MarkersControlsMarkersScaleX) + sizeof(MarkersControlsMarkersScaleY) + sizeof(MarkersControlsMarkersScaleZ) + sizeof(MarkersControlsMarkersColorR) + sizeof(MarkersControlsMarkersColorG) + sizeof(MarkersControlsMarkersColorB) + sizeof(MarkersControlsMarkersColorA) + sizeof(MarkersControlsMarkersLifetimeSec) + sizeof(MarkersControlsMarkersLifetimeNanosec) + sizeof(MarkersControlsMarkersFrameLocked) + sizeof(MarkersControlsMarkersPointsX) + sizeof(MarkersControlsMarkersPointsY) + sizeof(MarkersControlsMarkersPointsZ) + sizeof(MarkersControlsMarkersColorsR) + sizeof(MarkersControlsMarkersColorsG) + sizeof(MarkersControlsMarkersColorsB) + sizeof(MarkersControlsMarkersColorsA) + sizeof(MarkersControlsMarkersText) + sizeof(MarkersControlsMarkersMeshResource) + sizeof(MarkersControlsMarkersMeshUseEmbeddedMaterials) + sizeof(MarkersControlsIndependentMarkerOrientation) + sizeof(MarkersControlsDescription)));
		out_ros_data.markers.size = MarkersHeaderStampSec.Num();
		out_ros_data.markers.capacity = MarkersHeaderStampSec.Num();
		for (auto i = 0; i < MarkersHeaderStampSec.Num(); ++i)
		{
			out_ros_data.markers.data[i].header.stamp.sec = MarkersHeaderStampSec[i];

			out_ros_data.markers.data[i].header.stamp.nanosec = MarkersHeaderStampNanosec[i];

			{
				FTCHARToUTF8 strUtf8( *MarkersHeaderFrameId[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].header.frame_id.data = (decltype(out_ros_data.markers.data[i].header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].header.frame_id.data)));
		memcpy(out_ros_data.markers.data[i].header.frame_id.data, TCHAR_TO_UTF8(*MarkersHeaderFrameId[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].header.frame_id.size = strLength;
				out_ros_data.markers.data[i].header.frame_id.capacity = strLength + 1;
			}

			out_ros_data.markers.data[i].pose.position.x = MarkersPosePosition[i].X;
			out_ros_data.markers.data[i].pose.position.y = MarkersPosePosition[i].Y;
			out_ros_data.markers.data[i].pose.position.z = MarkersPosePosition[i].Z;

			out_ros_data.markers.data[i].pose.orientation.x = MarkersPoseOrientation[i].X;
			out_ros_data.markers.data[i].pose.orientation.y = MarkersPoseOrientation[i].Y;
			out_ros_data.markers.data[i].pose.orientation.z = MarkersPoseOrientation[i].Z;
			out_ros_data.markers.data[i].pose.orientation.w = MarkersPoseOrientation[i].W;

			{
				FTCHARToUTF8 strUtf8( *MarkersName[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].name.data = (decltype(out_ros_data.markers.data[i].name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].name.data)));
		memcpy(out_ros_data.markers.data[i].name.data, TCHAR_TO_UTF8(*MarkersName[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].name.size = strLength;
				out_ros_data.markers.data[i].name.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *MarkersDescription[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].description.data = (decltype(out_ros_data.markers.data[i].description.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].description.data)));
		memcpy(out_ros_data.markers.data[i].description.data, TCHAR_TO_UTF8(*MarkersDescription[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].description.size = strLength;
				out_ros_data.markers.data[i].description.capacity = strLength + 1;
			}

			out_ros_data.markers.data[i].scale = MarkersScale[i];

			out_ros_data.markers.data[i].menu_entries.data[i].id = MarkersMenuEntriesId[i];

			out_ros_data.markers.data[i].menu_entries.data[i].parent_id = MarkersMenuEntriesParentId[i];

			{
				FTCHARToUTF8 strUtf8( *MarkersMenuEntriesTitle[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].menu_entries.data[i].title.data = (decltype(out_ros_data.markers.data[i].menu_entries.data[i].title.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].menu_entries.data[i].title.data)));
		memcpy(out_ros_data.markers.data[i].menu_entries.data[i].title.data, TCHAR_TO_UTF8(*MarkersMenuEntriesTitle[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].menu_entries.data[i].title.size = strLength;
				out_ros_data.markers.data[i].menu_entries.data[i].title.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *MarkersMenuEntriesCommand[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].menu_entries.data[i].command.data = (decltype(out_ros_data.markers.data[i].menu_entries.data[i].command.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].menu_entries.data[i].command.data)));
		memcpy(out_ros_data.markers.data[i].menu_entries.data[i].command.data, TCHAR_TO_UTF8(*MarkersMenuEntriesCommand[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].menu_entries.data[i].command.size = strLength;
				out_ros_data.markers.data[i].menu_entries.data[i].command.capacity = strLength + 1;
			}

			out_ros_data.markers.data[i].menu_entries.data[i].command_type = MarkersMenuEntriesCommandType[i];

			{
				FTCHARToUTF8 strUtf8( *MarkersControlsName[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].controls.data[i].name.data = (decltype(out_ros_data.markers.data[i].controls.data[i].name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].controls.data[i].name.data)));
		memcpy(out_ros_data.markers.data[i].controls.data[i].name.data, TCHAR_TO_UTF8(*MarkersControlsName[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].controls.data[i].name.size = strLength;
				out_ros_data.markers.data[i].controls.data[i].name.capacity = strLength + 1;
			}

			out_ros_data.markers.data[i].controls.data[i].orientation.x = MarkersControlsOrientationX[i];

			out_ros_data.markers.data[i].controls.data[i].orientation.y = MarkersControlsOrientationY[i];

			out_ros_data.markers.data[i].controls.data[i].orientation.z = MarkersControlsOrientationZ[i];

			out_ros_data.markers.data[i].controls.data[i].orientation.w = MarkersControlsOrientationW[i];

			out_ros_data.markers.data[i].controls.data[i].orientation_mode = MarkersControlsOrientationMode[i];

			out_ros_data.markers.data[i].controls.data[i].interaction_mode = MarkersControlsInteractionMode[i];

			out_ros_data.markers.data[i].controls.data[i].always_visible = MarkersControlsAlwaysVisible[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].header.stamp.sec = MarkersControlsMarkersHeaderStampSec[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].header.stamp.nanosec = MarkersControlsMarkersHeaderStampNanosec[i];

			{
				FTCHARToUTF8 strUtf8( *MarkersControlsMarkersHeaderFrameId[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].header.frame_id.data = (decltype(out_ros_data.markers.data[i].controls.data[i].markers.data[i].header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].controls.data[i].markers.data[i].header.frame_id.data)));
		memcpy(out_ros_data.markers.data[i].controls.data[i].markers.data[i].header.frame_id.data, TCHAR_TO_UTF8(*MarkersControlsMarkersHeaderFrameId[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].header.frame_id.size = strLength;
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].header.frame_id.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *MarkersControlsMarkersNs[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].ns.data = (decltype(out_ros_data.markers.data[i].controls.data[i].markers.data[i].ns.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].controls.data[i].markers.data[i].ns.data)));
		memcpy(out_ros_data.markers.data[i].controls.data[i].markers.data[i].ns.data, TCHAR_TO_UTF8(*MarkersControlsMarkersNs[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].ns.size = strLength;
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].ns.capacity = strLength + 1;
			}

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].id = MarkersControlsMarkersId[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].type = MarkersControlsMarkersType[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].action = MarkersControlsMarkersAction[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.position.x = MarkersControlsMarkersPosePosition[i].X;
			out_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.position.y = MarkersControlsMarkersPosePosition[i].Y;
			out_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.position.z = MarkersControlsMarkersPosePosition[i].Z;

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.orientation.x = MarkersControlsMarkersPoseOrientation[i].X;
			out_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.orientation.y = MarkersControlsMarkersPoseOrientation[i].Y;
			out_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.orientation.z = MarkersControlsMarkersPoseOrientation[i].Z;
			out_ros_data.markers.data[i].controls.data[i].markers.data[i].pose.orientation.w = MarkersControlsMarkersPoseOrientation[i].W;

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].scale.x = MarkersControlsMarkersScaleX[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].scale.y = MarkersControlsMarkersScaleY[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].scale.z = MarkersControlsMarkersScaleZ[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].color.r = MarkersControlsMarkersColorR[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].color.g = MarkersControlsMarkersColorG[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].color.b = MarkersControlsMarkersColorB[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].color.a = MarkersControlsMarkersColorA[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].lifetime.sec = MarkersControlsMarkersLifetimeSec[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].lifetime.nanosec = MarkersControlsMarkersLifetimeNanosec[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].frame_locked = MarkersControlsMarkersFrameLocked[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].points.data[i].x = MarkersControlsMarkersPointsX[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].points.data[i].y = MarkersControlsMarkersPointsY[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].points.data[i].z = MarkersControlsMarkersPointsZ[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].colors.data[i].r = MarkersControlsMarkersColorsR[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].colors.data[i].g = MarkersControlsMarkersColorsG[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].colors.data[i].b = MarkersControlsMarkersColorsB[i];

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].colors.data[i].a = MarkersControlsMarkersColorsA[i];

			{
				FTCHARToUTF8 strUtf8( *MarkersControlsMarkersText[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].text.data = (decltype(out_ros_data.markers.data[i].controls.data[i].markers.data[i].text.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].controls.data[i].markers.data[i].text.data)));
		memcpy(out_ros_data.markers.data[i].controls.data[i].markers.data[i].text.data, TCHAR_TO_UTF8(*MarkersControlsMarkersText[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].text.size = strLength;
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].text.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *MarkersControlsMarkersMeshResource[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_resource.data = (decltype(out_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_resource.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_resource.data)));
		memcpy(out_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_resource.data, TCHAR_TO_UTF8(*MarkersControlsMarkersMeshResource[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_resource.size = strLength;
				out_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_resource.capacity = strLength + 1;
			}

			out_ros_data.markers.data[i].controls.data[i].markers.data[i].mesh_use_embedded_materials = MarkersControlsMarkersMeshUseEmbeddedMaterials[i];

			out_ros_data.markers.data[i].controls.data[i].independent_marker_orientation = MarkersControlsIndependentMarkerOrientation[i];

			{
				FTCHARToUTF8 strUtf8( *MarkersControlsDescription[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.markers.data[i].controls.data[i].description.data = (decltype(out_ros_data.markers.data[i].controls.data[i].description.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.markers.data[i].controls.data[i].description.data)));
		memcpy(out_ros_data.markers.data[i].controls.data[i].description.data, TCHAR_TO_UTF8(*MarkersControlsDescription[i]), (strLength+1)*sizeof(char));
				out_ros_data.markers.data[i].controls.data[i].description.size = strLength;
				out_ros_data.markers.data[i].controls.data[i].description.capacity = strLength + 1;
			}

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2InteractiveMarkerInitMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSInteractiveMarkerInit& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSInteractiveMarkerInit& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	visualization_msgs__msg__InteractiveMarkerInit interactive_marker_init_msg;
};