// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from nav_msgs/msg/Path.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "nav_msgs/msg/path.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2PathMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSPath
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> PosesHeaderStampSec;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> PosesHeaderStampNanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> PosesHeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> PosesPosePosition;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FQuat> PosesPoseOrientation;

	

	void SetFromROS2(const nav_msgs__msg__Path& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		for (auto i = 0; i < in_ros_data.poses.size; ++i)
		{
			PosesHeaderStampSec.Emplace(in_ros_data.poses.data[i].header.stamp.sec);
		}

		for (auto i = 0; i < in_ros_data.poses.size; ++i)
		{
			PosesHeaderStampNanosec.Emplace(in_ros_data.poses.data[i].header.stamp.nanosec);
		}

		for (auto i = 0; i < in_ros_data.poses.size; ++i)
		{
			PosesHeaderFrameId.Emplace("");
			PosesHeaderFrameId[i].AppendChars(in_ros_data.poses.data[i].header.frame_id.data,in_ros_data.poses.data[i].header.frame_id.size);
		}

		for (auto i = 0; i < in_ros_data.poses.size; ++i)
		{
			PosesPosePosition.Emplace(FVector::ZeroVector);
			PosesPosePosition[i].X = in_ros_data.poses.data[i].pose.position.x;
			PosesPosePosition[i].Y = in_ros_data.poses.data[i].pose.position.y;
			PosesPosePosition[i].Z = in_ros_data.poses.data[i].pose.position.z;
		}

		for (auto i = 0; i < in_ros_data.poses.size; ++i)
		{
			PosesPoseOrientation.Emplace(FQuat::Identity);
			PosesPoseOrientation[i].X = in_ros_data.poses.data[i].pose.orientation.x;
			PosesPoseOrientation[i].Y = in_ros_data.poses.data[i].pose.orientation.y;
			PosesPoseOrientation[i].Z = in_ros_data.poses.data[i].pose.orientation.z;
			PosesPoseOrientation[i].W = in_ros_data.poses.data[i].pose.orientation.w;
		}

		
	}

	void SetROS2(nav_msgs__msg__Path& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		if (out_ros_data.poses.data != nullptr)
		{
			free(out_ros_data.poses.data);
		}
		out_ros_data.poses.data = (decltype(out_ros_data.poses.data))malloc(PosesHeaderStampSec.Num() * (sizeof(PosesHeaderStampSec) + sizeof(PosesHeaderStampNanosec) + sizeof(PosesHeaderFrameId) + sizeof(PosesPosePosition) + sizeof(PosesPoseOrientation)));
		out_ros_data.poses.size = PosesHeaderStampSec.Num();
		out_ros_data.poses.capacity = PosesHeaderStampSec.Num();
		for (auto i = 0; i < PosesHeaderStampSec.Num(); ++i)
		{
			out_ros_data.poses.data[i].header.stamp.sec = PosesHeaderStampSec[i];

			out_ros_data.poses.data[i].header.stamp.nanosec = PosesHeaderStampNanosec[i];

			{
				FTCHARToUTF8 strUtf8( *PosesHeaderFrameId[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.poses.data[i].header.frame_id.data = (decltype(out_ros_data.poses.data[i].header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.poses.data[i].header.frame_id.data)));
		memcpy(out_ros_data.poses.data[i].header.frame_id.data, TCHAR_TO_UTF8(*PosesHeaderFrameId[i]), (strLength+1)*sizeof(char));
				out_ros_data.poses.data[i].header.frame_id.size = strLength;
				out_ros_data.poses.data[i].header.frame_id.capacity = strLength + 1;
			}

			out_ros_data.poses.data[i].pose.position.x = PosesPosePosition[i].X;
			out_ros_data.poses.data[i].pose.position.y = PosesPosePosition[i].Y;
			out_ros_data.poses.data[i].pose.position.z = PosesPosePosition[i].Z;

			out_ros_data.poses.data[i].pose.orientation.x = PosesPoseOrientation[i].X;
			out_ros_data.poses.data[i].pose.orientation.y = PosesPoseOrientation[i].Y;
			out_ros_data.poses.data[i].pose.orientation.z = PosesPoseOrientation[i].Z;
			out_ros_data.poses.data[i].pose.orientation.w = PosesPoseOrientation[i].W;

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2PathMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSPath& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSPath& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	nav_msgs__msg__Path path_msg;
};