// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from visualization_msgs/msg/InteractiveMarker.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "visualization_msgs/msg/interactive_marker.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2InteractiveMarkerMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSInteractiveMarker
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector PosePosition = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat PoseOrientation = FQuat::Identity;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Name;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString Description;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float Scale = 0.f;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> MenuEntriesId;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> MenuEntriesParentId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MenuEntriesTitle;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> MenuEntriesCommand;

	UPROPERTY(EditAnywhere)
	TArray<uint8> MenuEntriesCommandType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ControlsName;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsOrientationX;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsOrientationY;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsOrientationZ;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsOrientationW;

	UPROPERTY(EditAnywhere)
	TArray<uint8> ControlsOrientationMode;

	UPROPERTY(EditAnywhere)
	TArray<uint8> ControlsInteractionMode;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> ControlsAlwaysVisible;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ControlsMarkersHeaderStampSec;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> ControlsMarkersHeaderStampNanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ControlsMarkersHeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ControlsMarkersNs;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ControlsMarkersId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ControlsMarkersType;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ControlsMarkersAction;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FVector> ControlsMarkersPosePosition;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FQuat> ControlsMarkersPoseOrientation;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsMarkersScaleX;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsMarkersScaleY;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsMarkersScaleZ;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ControlsMarkersColorR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ControlsMarkersColorG;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ControlsMarkersColorB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ControlsMarkersColorA;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<int> ControlsMarkersLifetimeSec;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> ControlsMarkersLifetimeNanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> ControlsMarkersFrameLocked;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsMarkersPointsX;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsMarkersPointsY;

	UPROPERTY(EditAnywhere)
	TArray<double> ControlsMarkersPointsZ;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ControlsMarkersColorsR;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ControlsMarkersColorsG;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ControlsMarkersColorsB;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ControlsMarkersColorsA;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ControlsMarkersText;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ControlsMarkersMeshResource;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> ControlsMarkersMeshUseEmbeddedMaterials;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<bool> ControlsIndependentMarkerOrientation;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> ControlsDescription;

	

	void SetFromROS2(const visualization_msgs__msg__InteractiveMarker& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		PosePosition.X = in_ros_data.pose.position.x;
		PosePosition.Y = in_ros_data.pose.position.y;
		PosePosition.Z = in_ros_data.pose.position.z;

		PoseOrientation.X = in_ros_data.pose.orientation.x;
		PoseOrientation.Y = in_ros_data.pose.orientation.y;
		PoseOrientation.Z = in_ros_data.pose.orientation.z;
		PoseOrientation.W = in_ros_data.pose.orientation.w;

		Name.AppendChars(in_ros_data.name.data, in_ros_data.name.size);

		Description.AppendChars(in_ros_data.description.data, in_ros_data.description.size);

		Scale = in_ros_data.scale;

		for (auto i = 0; i < in_ros_data.menu_entries.size; ++i)
		{
			MenuEntriesId.Emplace(in_ros_data.menu_entries.data[i].id);
		}

		for (auto i = 0; i < in_ros_data.menu_entries.size; ++i)
		{
			MenuEntriesParentId.Emplace(in_ros_data.menu_entries.data[i].parent_id);
		}

		for (auto i = 0; i < in_ros_data.menu_entries.size; ++i)
		{
			MenuEntriesTitle.Emplace("");
			MenuEntriesTitle[i].AppendChars(in_ros_data.menu_entries.data[i].title.data,in_ros_data.menu_entries.data[i].title.size);
		}

		for (auto i = 0; i < in_ros_data.menu_entries.size; ++i)
		{
			MenuEntriesCommand.Emplace("");
			MenuEntriesCommand[i].AppendChars(in_ros_data.menu_entries.data[i].command.data,in_ros_data.menu_entries.data[i].command.size);
		}

		for (auto i = 0; i < in_ros_data.menu_entries.size; ++i)
		{
			MenuEntriesCommandType.Emplace(in_ros_data.menu_entries.data[i].command_type);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsName.Emplace("");
			ControlsName[i].AppendChars(in_ros_data.controls.data[i].name.data,in_ros_data.controls.data[i].name.size);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsOrientationX.Emplace(in_ros_data.controls.data[i].orientation.x);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsOrientationY.Emplace(in_ros_data.controls.data[i].orientation.y);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsOrientationZ.Emplace(in_ros_data.controls.data[i].orientation.z);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsOrientationW.Emplace(in_ros_data.controls.data[i].orientation.w);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsOrientationMode.Emplace(in_ros_data.controls.data[i].orientation_mode);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsInteractionMode.Emplace(in_ros_data.controls.data[i].interaction_mode);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsAlwaysVisible.Emplace(in_ros_data.controls.data[i].always_visible);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersHeaderStampSec.Emplace(in_ros_data.controls.data[i].markers.data[i].header.stamp.sec);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersHeaderStampNanosec.Emplace(in_ros_data.controls.data[i].markers.data[i].header.stamp.nanosec);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersHeaderFrameId.Emplace("");
			ControlsMarkersHeaderFrameId[i].AppendChars(in_ros_data.controls.data[i].markers.data[i].header.frame_id.data,in_ros_data.controls.data[i].markers.data[i].header.frame_id.size);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersNs.Emplace("");
			ControlsMarkersNs[i].AppendChars(in_ros_data.controls.data[i].markers.data[i].ns.data,in_ros_data.controls.data[i].markers.data[i].ns.size);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersId.Emplace(in_ros_data.controls.data[i].markers.data[i].id);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersType.Emplace(in_ros_data.controls.data[i].markers.data[i].type);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersAction.Emplace(in_ros_data.controls.data[i].markers.data[i].action);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersPosePosition.Emplace(FVector::ZeroVector);
			ControlsMarkersPosePosition[i].X = in_ros_data.controls.data[i].markers.data[i].pose.position.x;
			ControlsMarkersPosePosition[i].Y = in_ros_data.controls.data[i].markers.data[i].pose.position.y;
			ControlsMarkersPosePosition[i].Z = in_ros_data.controls.data[i].markers.data[i].pose.position.z;
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersPoseOrientation.Emplace(FQuat::Identity);
			ControlsMarkersPoseOrientation[i].X = in_ros_data.controls.data[i].markers.data[i].pose.orientation.x;
			ControlsMarkersPoseOrientation[i].Y = in_ros_data.controls.data[i].markers.data[i].pose.orientation.y;
			ControlsMarkersPoseOrientation[i].Z = in_ros_data.controls.data[i].markers.data[i].pose.orientation.z;
			ControlsMarkersPoseOrientation[i].W = in_ros_data.controls.data[i].markers.data[i].pose.orientation.w;
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersScaleX.Emplace(in_ros_data.controls.data[i].markers.data[i].scale.x);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersScaleY.Emplace(in_ros_data.controls.data[i].markers.data[i].scale.y);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersScaleZ.Emplace(in_ros_data.controls.data[i].markers.data[i].scale.z);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersColorR.Emplace(in_ros_data.controls.data[i].markers.data[i].color.r);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersColorG.Emplace(in_ros_data.controls.data[i].markers.data[i].color.g);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersColorB.Emplace(in_ros_data.controls.data[i].markers.data[i].color.b);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersColorA.Emplace(in_ros_data.controls.data[i].markers.data[i].color.a);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersLifetimeSec.Emplace(in_ros_data.controls.data[i].markers.data[i].lifetime.sec);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersLifetimeNanosec.Emplace(in_ros_data.controls.data[i].markers.data[i].lifetime.nanosec);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersFrameLocked.Emplace(in_ros_data.controls.data[i].markers.data[i].frame_locked);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersPointsX.Emplace(in_ros_data.controls.data[i].markers.data[i].points.data[i].x);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersPointsY.Emplace(in_ros_data.controls.data[i].markers.data[i].points.data[i].y);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersPointsZ.Emplace(in_ros_data.controls.data[i].markers.data[i].points.data[i].z);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersColorsR.Emplace(in_ros_data.controls.data[i].markers.data[i].colors.data[i].r);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersColorsG.Emplace(in_ros_data.controls.data[i].markers.data[i].colors.data[i].g);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersColorsB.Emplace(in_ros_data.controls.data[i].markers.data[i].colors.data[i].b);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersColorsA.Emplace(in_ros_data.controls.data[i].markers.data[i].colors.data[i].a);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersText.Emplace("");
			ControlsMarkersText[i].AppendChars(in_ros_data.controls.data[i].markers.data[i].text.data,in_ros_data.controls.data[i].markers.data[i].text.size);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersMeshResource.Emplace("");
			ControlsMarkersMeshResource[i].AppendChars(in_ros_data.controls.data[i].markers.data[i].mesh_resource.data,in_ros_data.controls.data[i].markers.data[i].mesh_resource.size);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsMarkersMeshUseEmbeddedMaterials.Emplace(in_ros_data.controls.data[i].markers.data[i].mesh_use_embedded_materials);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsIndependentMarkerOrientation.Emplace(in_ros_data.controls.data[i].independent_marker_orientation);
		}

		for (auto i = 0; i < in_ros_data.controls.size; ++i)
		{
			ControlsDescription.Emplace("");
			ControlsDescription[i].AppendChars(in_ros_data.controls.data[i].description.data,in_ros_data.controls.data[i].description.size);
		}

		
	}

	void SetROS2(visualization_msgs__msg__InteractiveMarker& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.pose.position.x = PosePosition.X;
		out_ros_data.pose.position.y = PosePosition.Y;
		out_ros_data.pose.position.z = PosePosition.Z;

		out_ros_data.pose.orientation.x = PoseOrientation.X;
		out_ros_data.pose.orientation.y = PoseOrientation.Y;
		out_ros_data.pose.orientation.z = PoseOrientation.Z;
		out_ros_data.pose.orientation.w = PoseOrientation.W;

		{
			FTCHARToUTF8 strUtf8( *Name );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.name.data != nullptr)
		{
			free(out_ros_data.name.data);
		}
		out_ros_data.name.data = (decltype(out_ros_data.name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.name.data)));
		memcpy(out_ros_data.name.data, TCHAR_TO_UTF8(*Name), (strLength+1)*sizeof(char));
			out_ros_data.name.size = strLength;
			out_ros_data.name.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *Description );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.description.data != nullptr)
		{
			free(out_ros_data.description.data);
		}
		out_ros_data.description.data = (decltype(out_ros_data.description.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.description.data)));
		memcpy(out_ros_data.description.data, TCHAR_TO_UTF8(*Description), (strLength+1)*sizeof(char));
			out_ros_data.description.size = strLength;
			out_ros_data.description.capacity = strLength + 1;
		}

		out_ros_data.scale = Scale;

		if (out_ros_data.menu_entries.data != nullptr)
		{
			free(out_ros_data.menu_entries.data);
		}
		out_ros_data.menu_entries.data = (decltype(out_ros_data.menu_entries.data))malloc(MenuEntriesId.Num() * (sizeof(MenuEntriesId) + sizeof(MenuEntriesParentId) + sizeof(MenuEntriesTitle) + sizeof(MenuEntriesCommand) + sizeof(MenuEntriesCommandType)));
		out_ros_data.menu_entries.size = MenuEntriesId.Num();
		out_ros_data.menu_entries.capacity = MenuEntriesId.Num();
		for (auto i = 0; i < MenuEntriesId.Num(); ++i)
		{
			out_ros_data.menu_entries.data[i].id = MenuEntriesId[i];

			out_ros_data.menu_entries.data[i].parent_id = MenuEntriesParentId[i];

			{
				FTCHARToUTF8 strUtf8( *MenuEntriesTitle[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.menu_entries.data[i].title.data = (decltype(out_ros_data.menu_entries.data[i].title.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.menu_entries.data[i].title.data)));
		memcpy(out_ros_data.menu_entries.data[i].title.data, TCHAR_TO_UTF8(*MenuEntriesTitle[i]), (strLength+1)*sizeof(char));
				out_ros_data.menu_entries.data[i].title.size = strLength;
				out_ros_data.menu_entries.data[i].title.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *MenuEntriesCommand[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.menu_entries.data[i].command.data = (decltype(out_ros_data.menu_entries.data[i].command.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.menu_entries.data[i].command.data)));
		memcpy(out_ros_data.menu_entries.data[i].command.data, TCHAR_TO_UTF8(*MenuEntriesCommand[i]), (strLength+1)*sizeof(char));
				out_ros_data.menu_entries.data[i].command.size = strLength;
				out_ros_data.menu_entries.data[i].command.capacity = strLength + 1;
			}

			out_ros_data.menu_entries.data[i].command_type = MenuEntriesCommandType[i];

			}
	if (out_ros_data.controls.data != nullptr)
		{
			free(out_ros_data.controls.data);
		}
		out_ros_data.controls.data = (decltype(out_ros_data.controls.data))malloc(ControlsName.Num() * (sizeof(ControlsName) + sizeof(ControlsOrientationX) + sizeof(ControlsOrientationY) + sizeof(ControlsOrientationZ) + sizeof(ControlsOrientationW) + sizeof(ControlsOrientationMode) + sizeof(ControlsInteractionMode) + sizeof(ControlsAlwaysVisible) + sizeof(ControlsMarkersHeaderStampSec) + sizeof(ControlsMarkersHeaderStampNanosec) + sizeof(ControlsMarkersHeaderFrameId) + sizeof(ControlsMarkersNs) + sizeof(ControlsMarkersId) + sizeof(ControlsMarkersType) + sizeof(ControlsMarkersAction) + sizeof(ControlsMarkersPosePosition) + sizeof(ControlsMarkersPoseOrientation) + sizeof(ControlsMarkersScaleX) + sizeof(ControlsMarkersScaleY) + sizeof(ControlsMarkersScaleZ) + sizeof(ControlsMarkersColorR) + sizeof(ControlsMarkersColorG) + sizeof(ControlsMarkersColorB) + sizeof(ControlsMarkersColorA) + sizeof(ControlsMarkersLifetimeSec) + sizeof(ControlsMarkersLifetimeNanosec) + sizeof(ControlsMarkersFrameLocked) + sizeof(ControlsMarkersPointsX) + sizeof(ControlsMarkersPointsY) + sizeof(ControlsMarkersPointsZ) + sizeof(ControlsMarkersColorsR) + sizeof(ControlsMarkersColorsG) + sizeof(ControlsMarkersColorsB) + sizeof(ControlsMarkersColorsA) + sizeof(ControlsMarkersText) + sizeof(ControlsMarkersMeshResource) + sizeof(ControlsMarkersMeshUseEmbeddedMaterials) + sizeof(ControlsIndependentMarkerOrientation) + sizeof(ControlsDescription)));
		out_ros_data.controls.size = ControlsName.Num();
		out_ros_data.controls.capacity = ControlsName.Num();
		for (auto i = 0; i < ControlsName.Num(); ++i)
		{
			{
				FTCHARToUTF8 strUtf8( *ControlsName[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.controls.data[i].name.data = (decltype(out_ros_data.controls.data[i].name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.controls.data[i].name.data)));
		memcpy(out_ros_data.controls.data[i].name.data, TCHAR_TO_UTF8(*ControlsName[i]), (strLength+1)*sizeof(char));
				out_ros_data.controls.data[i].name.size = strLength;
				out_ros_data.controls.data[i].name.capacity = strLength + 1;
			}

			out_ros_data.controls.data[i].orientation.x = ControlsOrientationX[i];

			out_ros_data.controls.data[i].orientation.y = ControlsOrientationY[i];

			out_ros_data.controls.data[i].orientation.z = ControlsOrientationZ[i];

			out_ros_data.controls.data[i].orientation.w = ControlsOrientationW[i];

			out_ros_data.controls.data[i].orientation_mode = ControlsOrientationMode[i];

			out_ros_data.controls.data[i].interaction_mode = ControlsInteractionMode[i];

			out_ros_data.controls.data[i].always_visible = ControlsAlwaysVisible[i];

			out_ros_data.controls.data[i].markers.data[i].header.stamp.sec = ControlsMarkersHeaderStampSec[i];

			out_ros_data.controls.data[i].markers.data[i].header.stamp.nanosec = ControlsMarkersHeaderStampNanosec[i];

			{
				FTCHARToUTF8 strUtf8( *ControlsMarkersHeaderFrameId[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.controls.data[i].markers.data[i].header.frame_id.data = (decltype(out_ros_data.controls.data[i].markers.data[i].header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.controls.data[i].markers.data[i].header.frame_id.data)));
		memcpy(out_ros_data.controls.data[i].markers.data[i].header.frame_id.data, TCHAR_TO_UTF8(*ControlsMarkersHeaderFrameId[i]), (strLength+1)*sizeof(char));
				out_ros_data.controls.data[i].markers.data[i].header.frame_id.size = strLength;
				out_ros_data.controls.data[i].markers.data[i].header.frame_id.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *ControlsMarkersNs[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.controls.data[i].markers.data[i].ns.data = (decltype(out_ros_data.controls.data[i].markers.data[i].ns.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.controls.data[i].markers.data[i].ns.data)));
		memcpy(out_ros_data.controls.data[i].markers.data[i].ns.data, TCHAR_TO_UTF8(*ControlsMarkersNs[i]), (strLength+1)*sizeof(char));
				out_ros_data.controls.data[i].markers.data[i].ns.size = strLength;
				out_ros_data.controls.data[i].markers.data[i].ns.capacity = strLength + 1;
			}

			out_ros_data.controls.data[i].markers.data[i].id = ControlsMarkersId[i];

			out_ros_data.controls.data[i].markers.data[i].type = ControlsMarkersType[i];

			out_ros_data.controls.data[i].markers.data[i].action = ControlsMarkersAction[i];

			out_ros_data.controls.data[i].markers.data[i].pose.position.x = ControlsMarkersPosePosition[i].X;
			out_ros_data.controls.data[i].markers.data[i].pose.position.y = ControlsMarkersPosePosition[i].Y;
			out_ros_data.controls.data[i].markers.data[i].pose.position.z = ControlsMarkersPosePosition[i].Z;

			out_ros_data.controls.data[i].markers.data[i].pose.orientation.x = ControlsMarkersPoseOrientation[i].X;
			out_ros_data.controls.data[i].markers.data[i].pose.orientation.y = ControlsMarkersPoseOrientation[i].Y;
			out_ros_data.controls.data[i].markers.data[i].pose.orientation.z = ControlsMarkersPoseOrientation[i].Z;
			out_ros_data.controls.data[i].markers.data[i].pose.orientation.w = ControlsMarkersPoseOrientation[i].W;

			out_ros_data.controls.data[i].markers.data[i].scale.x = ControlsMarkersScaleX[i];

			out_ros_data.controls.data[i].markers.data[i].scale.y = ControlsMarkersScaleY[i];

			out_ros_data.controls.data[i].markers.data[i].scale.z = ControlsMarkersScaleZ[i];

			out_ros_data.controls.data[i].markers.data[i].color.r = ControlsMarkersColorR[i];

			out_ros_data.controls.data[i].markers.data[i].color.g = ControlsMarkersColorG[i];

			out_ros_data.controls.data[i].markers.data[i].color.b = ControlsMarkersColorB[i];

			out_ros_data.controls.data[i].markers.data[i].color.a = ControlsMarkersColorA[i];

			out_ros_data.controls.data[i].markers.data[i].lifetime.sec = ControlsMarkersLifetimeSec[i];

			out_ros_data.controls.data[i].markers.data[i].lifetime.nanosec = ControlsMarkersLifetimeNanosec[i];

			out_ros_data.controls.data[i].markers.data[i].frame_locked = ControlsMarkersFrameLocked[i];

			out_ros_data.controls.data[i].markers.data[i].points.data[i].x = ControlsMarkersPointsX[i];

			out_ros_data.controls.data[i].markers.data[i].points.data[i].y = ControlsMarkersPointsY[i];

			out_ros_data.controls.data[i].markers.data[i].points.data[i].z = ControlsMarkersPointsZ[i];

			out_ros_data.controls.data[i].markers.data[i].colors.data[i].r = ControlsMarkersColorsR[i];

			out_ros_data.controls.data[i].markers.data[i].colors.data[i].g = ControlsMarkersColorsG[i];

			out_ros_data.controls.data[i].markers.data[i].colors.data[i].b = ControlsMarkersColorsB[i];

			out_ros_data.controls.data[i].markers.data[i].colors.data[i].a = ControlsMarkersColorsA[i];

			{
				FTCHARToUTF8 strUtf8( *ControlsMarkersText[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.controls.data[i].markers.data[i].text.data = (decltype(out_ros_data.controls.data[i].markers.data[i].text.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.controls.data[i].markers.data[i].text.data)));
		memcpy(out_ros_data.controls.data[i].markers.data[i].text.data, TCHAR_TO_UTF8(*ControlsMarkersText[i]), (strLength+1)*sizeof(char));
				out_ros_data.controls.data[i].markers.data[i].text.size = strLength;
				out_ros_data.controls.data[i].markers.data[i].text.capacity = strLength + 1;
			}

			{
				FTCHARToUTF8 strUtf8( *ControlsMarkersMeshResource[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.controls.data[i].markers.data[i].mesh_resource.data = (decltype(out_ros_data.controls.data[i].markers.data[i].mesh_resource.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.controls.data[i].markers.data[i].mesh_resource.data)));
		memcpy(out_ros_data.controls.data[i].markers.data[i].mesh_resource.data, TCHAR_TO_UTF8(*ControlsMarkersMeshResource[i]), (strLength+1)*sizeof(char));
				out_ros_data.controls.data[i].markers.data[i].mesh_resource.size = strLength;
				out_ros_data.controls.data[i].markers.data[i].mesh_resource.capacity = strLength + 1;
			}

			out_ros_data.controls.data[i].markers.data[i].mesh_use_embedded_materials = ControlsMarkersMeshUseEmbeddedMaterials[i];

			out_ros_data.controls.data[i].independent_marker_orientation = ControlsIndependentMarkerOrientation[i];

			{
				FTCHARToUTF8 strUtf8( *ControlsDescription[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.controls.data[i].description.data = (decltype(out_ros_data.controls.data[i].description.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.controls.data[i].description.data)));
		memcpy(out_ros_data.controls.data[i].description.data, TCHAR_TO_UTF8(*ControlsDescription[i]), (strLength+1)*sizeof(char));
				out_ros_data.controls.data[i].description.size = strLength;
				out_ros_data.controls.data[i].description.capacity = strLength + 1;
			}

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2InteractiveMarkerMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSInteractiveMarker& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSInteractiveMarker& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	visualization_msgs__msg__InteractiveMarker interactive_marker_msg;
};