// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from geometry_msgs/PoseStamped.msg - do not modify

#pragma once

#include "CoreMinimal.h"

#include "geometry_msgs/msg/pose_stamped.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2PoseStampedMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSPoseStamped
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	double pose_position_x;

	double pose_position_y;

	double pose_position_z;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat pose_orientation;

	

	void SetFromROS2(geometry_msgs__msg__PoseStamped rosdata)
	{
    	header_stamp_sec = rosdata.header.stamp.sec;

		header_stamp_nanosec = rosdata.header.stamp.nanosec;

		header_frame_id.AppendChars(rosdata.header.frame_id.data, rosdata.header.frame_id.size);

		pose_position_x = rosdata.pose.position.x;

		pose_position_y = rosdata.pose.position.y;

		pose_position_z = rosdata.pose.position.z;

		pose_orientation.X = rosdata.pose.orientation.x;
		pose_orientation.Y = rosdata.pose.orientation.y;
		pose_orientation.Z = rosdata.pose.orientation.z;
		pose_orientation.W = rosdata.pose.orientation.w;

		
	}

	void SetROS2(geometry_msgs__msg__PoseStamped& rosdata) const
	{
    	rosdata.header.stamp.sec = header_stamp_sec;

		rosdata.header.stamp.nanosec = header_stamp_nanosec;

		if (rosdata.header.frame_id.data != nullptr)
		{
			free(rosdata.header.frame_id.data);
		}
		rosdata.header.frame_id.data = (char*)malloc((header_frame_id.Len()+1)*sizeof(char));
		memcpy(rosdata.header.frame_id.data, TCHAR_TO_ANSI(*header_frame_id), (header_frame_id.Len()+1)*sizeof(char));
		rosdata.header.frame_id.size = header_frame_id.Len();
		rosdata.header.frame_id.capacity = header_frame_id.Len() + 1;

		rosdata.pose.position.x = pose_position_x;

		rosdata.pose.position.y = pose_position_y;

		rosdata.pose.position.z = pose_position_z;

		rosdata.pose.orientation.x = pose_orientation.X;
		rosdata.pose.orientation.y = pose_orientation.Y;
		rosdata.pose.orientation.z = pose_orientation.Z;
		rosdata.pose.orientation.w = pose_orientation.W;

		
	}
};

UCLASS()
class RCLUE_API UROS2PoseStampedMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSPoseStamped Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSPoseStamped& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	geometry_msgs__msg__PoseStamped pose_stamped_msg;
};