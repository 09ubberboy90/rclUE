// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/msg/PointCloud2.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "sensor_msgs/msg/point_cloud2.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2PointCloud2Msg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSPointCloud2
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere)
	unsigned int Height = 0;

	UPROPERTY(EditAnywhere)
	unsigned int Width = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> FieldsName;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> FieldsOffset;

	UPROPERTY(EditAnywhere)
	TArray<uint8> FieldsDatatype;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> FieldsCount;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool bIsBigendian = false;

	UPROPERTY(EditAnywhere)
	unsigned int PointStep = 0;

	UPROPERTY(EditAnywhere)
	unsigned int RowStep = 0;

	UPROPERTY(EditAnywhere)
	TArray<uint8> Data;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool bIsDense = false;

	

	void SetFromROS2(const sensor_msgs__msg__PointCloud2& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		Height = in_ros_data.height;

		Width = in_ros_data.width;

		for (auto i = 0; i < in_ros_data.fields.size; ++i)
		{
			FieldsName.Emplace("");
			FieldsName[i].AppendChars(in_ros_data.fields.data[i].name.data,in_ros_data.fields.data[i].name.size);
		}

		for (auto i = 0; i < in_ros_data.fields.size; ++i)
		{
			FieldsOffset.Emplace(in_ros_data.fields.data[i].offset);
		}

		for (auto i = 0; i < in_ros_data.fields.size; ++i)
		{
			FieldsDatatype.Emplace(in_ros_data.fields.data[i].datatype);
		}

		for (auto i = 0; i < in_ros_data.fields.size; ++i)
		{
			FieldsCount.Emplace(in_ros_data.fields.data[i].count);
		}

		bIsBigendian = in_ros_data.is_bigendian;

		PointStep = in_ros_data.point_step;

		RowStep = in_ros_data.row_step;

		for (auto i = 0; i < in_ros_data.data.size; ++i)
		{
			Data.Emplace(in_ros_data.data.data[i]);
		}

		bIsDense = in_ros_data.is_dense;

		
	}

	void SetROS2(sensor_msgs__msg__PointCloud2& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.height = Height;

		out_ros_data.width = Width;

		if (out_ros_data.fields.data != nullptr)
		{
			free(out_ros_data.fields.data);
		}
		out_ros_data.fields.data = (decltype(out_ros_data.fields.data))malloc(FieldsName.Num() * (sizeof(FieldsName) + sizeof(FieldsOffset) + sizeof(FieldsDatatype) + sizeof(FieldsCount)));
		out_ros_data.fields.size = FieldsName.Num();
		out_ros_data.fields.capacity = FieldsName.Num();
		for (auto i = 0; i < FieldsName.Num(); ++i)
		{
			{
				FTCHARToUTF8 strUtf8( *FieldsName[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.fields.data[i].name.data = (decltype(out_ros_data.fields.data[i].name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.fields.data[i].name.data)));
		memcpy(out_ros_data.fields.data[i].name.data, TCHAR_TO_UTF8(*FieldsName[i]), (strLength+1)*sizeof(char));
				out_ros_data.fields.data[i].name.size = strLength;
				out_ros_data.fields.data[i].name.capacity = strLength + 1;
			}

			out_ros_data.fields.data[i].offset = FieldsOffset[i];

			out_ros_data.fields.data[i].datatype = FieldsDatatype[i];

			out_ros_data.fields.data[i].count = FieldsCount[i];

			}
	out_ros_data.is_bigendian = bIsBigendian;

		out_ros_data.point_step = PointStep;

		out_ros_data.row_step = RowStep;

		if (out_ros_data.data.data != nullptr)
		{
			free(out_ros_data.data.data);
		}
		out_ros_data.data.data = (decltype(out_ros_data.data.data))malloc((Data.Num())*sizeof(decltype(*out_ros_data.data.data)));
		
		for (auto i = 0; i < Data.Num(); ++i)
		{
			out_ros_data.data.data[i] = Data[i];
		}

		out_ros_data.data.size = Data.Num();
		out_ros_data.data.capacity = Data.Num();

		out_ros_data.is_dense = bIsDense;

		
	}
};

UCLASS()
class RCLUE_API UROS2PointCloud2Msg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSPointCloud2& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSPointCloud2& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__PointCloud2 point_cloud2_msg;
};