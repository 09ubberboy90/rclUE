// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/msg/Range.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "sensor_msgs/msg/range.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2RangeMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSRange
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	uint8 RadiationType = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float FieldOfView = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float MinRange = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float MaxRange = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float Range = 0.f;

	

	void SetFromROS2(const sensor_msgs__msg__Range& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		RadiationType = in_ros_data.radiation_type;

		FieldOfView = in_ros_data.field_of_view;

		MinRange = in_ros_data.min_range;

		MaxRange = in_ros_data.max_range;

		Range = in_ros_data.range;

		
	}

	void SetROS2(sensor_msgs__msg__Range& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.radiation_type = RadiationType;

		out_ros_data.field_of_view = FieldOfView;

		out_ros_data.min_range = MinRange;

		out_ros_data.max_range = MaxRange;

		out_ros_data.range = Range;

		
	}
};

UCLASS()
class RCLUE_API UROS2RangeMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSRange& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSRange& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__Range range_msg;
};