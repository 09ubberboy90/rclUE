// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/msg/LaserScan.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "sensor_msgs/msg/laser_scan.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2LaserScanMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSLaserScan
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float AngleMin = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float AngleMax = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float AngleIncrement = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float TimeIncrement = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float ScanTime = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float RangeMin = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float RangeMax = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> Ranges;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> Intensities;

	

	void SetFromROS2(const sensor_msgs__msg__LaserScan& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		AngleMin = in_ros_data.angle_min;

		AngleMax = in_ros_data.angle_max;

		AngleIncrement = in_ros_data.angle_increment;

		TimeIncrement = in_ros_data.time_increment;

		ScanTime = in_ros_data.scan_time;

		RangeMin = in_ros_data.range_min;

		RangeMax = in_ros_data.range_max;

		for (auto i = 0; i < in_ros_data.ranges.size; ++i)
		{
			Ranges.Emplace(in_ros_data.ranges.data[i]);
		}

		for (auto i = 0; i < in_ros_data.intensities.size; ++i)
		{
			Intensities.Emplace(in_ros_data.intensities.data[i]);
		}

		
	}

	void SetROS2(sensor_msgs__msg__LaserScan& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.angle_min = AngleMin;

		out_ros_data.angle_max = AngleMax;

		out_ros_data.angle_increment = AngleIncrement;

		out_ros_data.time_increment = TimeIncrement;

		out_ros_data.scan_time = ScanTime;

		out_ros_data.range_min = RangeMin;

		out_ros_data.range_max = RangeMax;

		if (out_ros_data.ranges.data != nullptr)
		{
			free(out_ros_data.ranges.data);
		}
		out_ros_data.ranges.data = (decltype(out_ros_data.ranges.data))malloc((Ranges.Num())*sizeof(decltype(*out_ros_data.ranges.data)));
		
		for (auto i = 0; i < Ranges.Num(); ++i)
		{
			out_ros_data.ranges.data[i] = Ranges[i];
		}

		out_ros_data.ranges.size = Ranges.Num();
		out_ros_data.ranges.capacity = Ranges.Num();

		if (out_ros_data.intensities.data != nullptr)
		{
			free(out_ros_data.intensities.data);
		}
		out_ros_data.intensities.data = (decltype(out_ros_data.intensities.data))malloc((Intensities.Num())*sizeof(decltype(*out_ros_data.intensities.data)));
		
		for (auto i = 0; i < Intensities.Num(); ++i)
		{
			out_ros_data.intensities.data[i] = Intensities[i];
		}

		out_ros_data.intensities.size = Intensities.Num();
		out_ros_data.intensities.capacity = Intensities.Num();

		
	}
};

UCLASS()
class RCLUE_API UROS2LaserScanMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSLaserScan& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSLaserScan& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__LaserScan laser_scan_msg;
};