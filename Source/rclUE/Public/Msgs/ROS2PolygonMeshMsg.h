// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from pcl_msgs/msg/PolygonMesh.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "pcl_msgs/msg/polygon_mesh.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2PolygonMeshMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSPolygonMesh
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int CloudHeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CloudHeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString CloudHeaderFrameId;

	UPROPERTY(EditAnywhere)
	unsigned int CloudHeight = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CloudWidth = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> CloudFieldsName;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> CloudFieldsOffset;

	UPROPERTY(EditAnywhere)
	TArray<uint8> CloudFieldsDatatype;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> CloudFieldsCount;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool CloudbIsBigendian = false;

	UPROPERTY(EditAnywhere)
	unsigned int CloudPointStep = 0;

	UPROPERTY(EditAnywhere)
	unsigned int CloudRowStep = 0;

	UPROPERTY(EditAnywhere)
	TArray<uint8> CloudData;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool CloudbIsDense = false;

	UPROPERTY(EditAnywhere)
	TArray<unsigned int> PolygonsVertices;

	

	void SetFromROS2(const pcl_msgs__msg__PolygonMesh& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		CloudHeaderStampSec = in_ros_data.cloud.header.stamp.sec;

		CloudHeaderStampNanosec = in_ros_data.cloud.header.stamp.nanosec;

		CloudHeaderFrameId.AppendChars(in_ros_data.cloud.header.frame_id.data, in_ros_data.cloud.header.frame_id.size);

		CloudHeight = in_ros_data.cloud.height;

		CloudWidth = in_ros_data.cloud.width;

		for (auto i = 0; i < in_ros_data.cloud.fields.size; ++i)
		{
			CloudFieldsName.Emplace("");
			CloudFieldsName[i].AppendChars(in_ros_data.cloud.fields.data[i].name.data,in_ros_data.cloud.fields.data[i].name.size);
		}

		for (auto i = 0; i < in_ros_data.cloud.fields.size; ++i)
		{
			CloudFieldsOffset.Emplace(in_ros_data.cloud.fields.data[i].offset);
		}

		for (auto i = 0; i < in_ros_data.cloud.fields.size; ++i)
		{
			CloudFieldsDatatype.Emplace(in_ros_data.cloud.fields.data[i].datatype);
		}

		for (auto i = 0; i < in_ros_data.cloud.fields.size; ++i)
		{
			CloudFieldsCount.Emplace(in_ros_data.cloud.fields.data[i].count);
		}

		CloudbIsBigendian = in_ros_data.cloud.is_bigendian;

		CloudPointStep = in_ros_data.cloud.point_step;

		CloudRowStep = in_ros_data.cloud.row_step;

		for (auto i = 0; i < in_ros_data.cloud.data.size; ++i)
		{
			CloudData.Emplace(in_ros_data.cloud.data.data[i]);
		}

		CloudbIsDense = in_ros_data.cloud.is_dense;

		for (auto i = 0; i < in_ros_data.polygons.size; ++i)
		{
			PolygonsVertices.Emplace(in_ros_data.polygons.data[i].vertices.data[i]);
		}

		
	}

	void SetROS2(pcl_msgs__msg__PolygonMesh& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.cloud.header.stamp.sec = CloudHeaderStampSec;

		out_ros_data.cloud.header.stamp.nanosec = CloudHeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *CloudHeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.cloud.header.frame_id.data != nullptr)
		{
			free(out_ros_data.cloud.header.frame_id.data);
		}
		out_ros_data.cloud.header.frame_id.data = (decltype(out_ros_data.cloud.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.cloud.header.frame_id.data)));
		memcpy(out_ros_data.cloud.header.frame_id.data, TCHAR_TO_UTF8(*CloudHeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.cloud.header.frame_id.size = strLength;
			out_ros_data.cloud.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.cloud.height = CloudHeight;

		out_ros_data.cloud.width = CloudWidth;

		out_ros_data.cloud.is_bigendian = CloudbIsBigendian;

		out_ros_data.cloud.point_step = CloudPointStep;

		out_ros_data.cloud.row_step = CloudRowStep;

		if (out_ros_data.cloud.data.data != nullptr)
		{
			free(out_ros_data.cloud.data.data);
		}
		out_ros_data.cloud.data.data = (decltype(out_ros_data.cloud.data.data))malloc((CloudData.Num())*sizeof(decltype(*out_ros_data.cloud.data.data)));
		
		for (auto i = 0; i < CloudData.Num(); ++i)
		{
			out_ros_data.cloud.data.data[i] = CloudData[i];
		}

		out_ros_data.cloud.data.size = CloudData.Num();
		out_ros_data.cloud.data.capacity = CloudData.Num();

		out_ros_data.cloud.is_dense = CloudbIsDense;

		if (out_ros_data.cloud.fields.data != nullptr)
		{
			free(out_ros_data.cloud.fields.data);
		}
		out_ros_data.cloud.fields.data = (decltype(out_ros_data.cloud.fields.data))malloc(CloudFieldsName.Num() * (sizeof(CloudFieldsName) + sizeof(CloudFieldsOffset) + sizeof(CloudFieldsDatatype) + sizeof(CloudFieldsCount)));
		out_ros_data.cloud.fields.size = CloudFieldsName.Num();
		out_ros_data.cloud.fields.capacity = CloudFieldsName.Num();
		for (auto i = 0; i < CloudFieldsName.Num(); ++i)
		{
			{
				FTCHARToUTF8 strUtf8( *CloudFieldsName[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.cloud.fields.data[i].name.data = (decltype(out_ros_data.cloud.fields.data[i].name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.cloud.fields.data[i].name.data)));
		memcpy(out_ros_data.cloud.fields.data[i].name.data, TCHAR_TO_UTF8(*CloudFieldsName[i]), (strLength+1)*sizeof(char));
				out_ros_data.cloud.fields.data[i].name.size = strLength;
				out_ros_data.cloud.fields.data[i].name.capacity = strLength + 1;
			}

			out_ros_data.cloud.fields.data[i].offset = CloudFieldsOffset[i];

			out_ros_data.cloud.fields.data[i].datatype = CloudFieldsDatatype[i];

			out_ros_data.cloud.fields.data[i].count = CloudFieldsCount[i];

			}
	if (out_ros_data.polygons.data != nullptr)
		{
			free(out_ros_data.polygons.data);
		}
		out_ros_data.polygons.data = (decltype(out_ros_data.polygons.data))malloc(PolygonsVertices.Num() * (sizeof(PolygonsVertices)));
		out_ros_data.polygons.size = PolygonsVertices.Num();
		out_ros_data.polygons.capacity = PolygonsVertices.Num();
		for (auto i = 0; i < PolygonsVertices.Num(); ++i)
		{
			out_ros_data.polygons.data[i].vertices.data[i] = PolygonsVertices[i];

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2PolygonMeshMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSPolygonMesh& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSPolygonMesh& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	pcl_msgs__msg__PolygonMesh polygon_mesh_msg;
};