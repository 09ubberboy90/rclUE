// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from geometry_msgs/AccelWithCovarianceStamped.msg - do not modify

#pragma once

#include "CoreMinimal.h"

#include "geometry_msgs/msg/accel_with_covariance_stamped.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2AccelWithCovarianceStampedMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSAccelWithCovarianceStamped
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector accel_accel_linear;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector accel_accel_angular;

	TArray<double> accel_covariance;

	

	void SetFromROS2(geometry_msgs__msg__AccelWithCovarianceStamped rosdata)
	{
    	header_stamp_sec = rosdata.header.stamp.sec;

		header_stamp_nanosec = rosdata.header.stamp.nanosec;

		header_frame_id.AppendChars(rosdata.header.frame_id.data, rosdata.header.frame_id.size);

		accel_accel_linear.X = rosdata.accel.accel.linear.x;
		accel_accel_linear.Y = rosdata.accel.accel.linear.y;
		accel_accel_linear.Z = rosdata.accel.accel.linear.z;

		accel_accel_angular.X = rosdata.accel.accel.angular.x;
		accel_accel_angular.Y = rosdata.accel.accel.angular.y;
		accel_accel_angular.Z = rosdata.accel.accel.angular.z;

		for (int i = 0; i < 36; i++)
		{
			accel_covariance[i] = rosdata.accel.covariance[i];
		}

		
	}

	void SetROS2(geometry_msgs__msg__AccelWithCovarianceStamped& rosdata) const
	{
    	rosdata.header.stamp.sec = header_stamp_sec;

		rosdata.header.stamp.nanosec = header_stamp_nanosec;

		if (rosdata.header.frame_id.data != nullptr)
		{
			free(rosdata.header.frame_id.data);
		}
		rosdata.header.frame_id.data = (char*)malloc((header_frame_id.Len()+1)*sizeof(char));
		memcpy(rosdata.header.frame_id.data, TCHAR_TO_ANSI(*header_frame_id), (header_frame_id.Len()+1)*sizeof(char));
		rosdata.header.frame_id.size = header_frame_id.Len();
		rosdata.header.frame_id.capacity = header_frame_id.Len() + 1;

		rosdata.accel.accel.linear.x = accel_accel_linear.X;
		rosdata.accel.accel.linear.y = accel_accel_linear.Y;
		rosdata.accel.accel.linear.z = accel_accel_linear.Z;

		rosdata.accel.accel.angular.x = accel_accel_angular.X;
		rosdata.accel.accel.angular.y = accel_accel_angular.Y;
		rosdata.accel.accel.angular.z = accel_accel_angular.Z;

		for (int i = 0; i < 36; i++)
		{
			rosdata.accel.covariance[i] = accel_covariance[i];
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2AccelWithCovarianceStampedMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSAccelWithCovarianceStamped Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSAccelWithCovarianceStamped& Output);
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	geometry_msgs__msg__AccelWithCovarianceStamped accel_with_covariance_stamped_msg;
};