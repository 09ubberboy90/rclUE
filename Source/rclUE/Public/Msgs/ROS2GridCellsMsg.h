// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from nav_msgs/msg/GridCells.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "nav_msgs/msg/grid_cells.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2GridCellsMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSGridCells
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float CellWidth = 0.f;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float CellHeight = 0.f;

	UPROPERTY(EditAnywhere)
	TArray<double> CellsX;

	UPROPERTY(EditAnywhere)
	TArray<double> CellsY;

	UPROPERTY(EditAnywhere)
	TArray<double> CellsZ;

	

	void SetFromROS2(const nav_msgs__msg__GridCells& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		CellWidth = in_ros_data.cell_width;

		CellHeight = in_ros_data.cell_height;

		for (auto i = 0; i < in_ros_data.cells.size; ++i)
		{
			CellsX.Emplace(in_ros_data.cells.data[i].x);
		}

		for (auto i = 0; i < in_ros_data.cells.size; ++i)
		{
			CellsY.Emplace(in_ros_data.cells.data[i].y);
		}

		for (auto i = 0; i < in_ros_data.cells.size; ++i)
		{
			CellsZ.Emplace(in_ros_data.cells.data[i].z);
		}

		
	}

	void SetROS2(nav_msgs__msg__GridCells& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.cell_width = CellWidth;

		out_ros_data.cell_height = CellHeight;

		if (out_ros_data.cells.data != nullptr)
		{
			free(out_ros_data.cells.data);
		}
		out_ros_data.cells.data = (decltype(out_ros_data.cells.data))malloc(CellsX.Num() * (sizeof(CellsX) + sizeof(CellsY) + sizeof(CellsZ)));
		out_ros_data.cells.size = CellsX.Num();
		out_ros_data.cells.capacity = CellsX.Num();
		for (auto i = 0; i < CellsX.Num(); ++i)
		{
			out_ros_data.cells.data[i].x = CellsX[i];

			out_ros_data.cells.data[i].y = CellsY[i];

			out_ros_data.cells.data[i].z = CellsZ[i];

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2GridCellsMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSGridCells& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSGridCells& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	nav_msgs__msg__GridCells grid_cells_msg;
};