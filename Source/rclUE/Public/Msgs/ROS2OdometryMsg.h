// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from nav_msgs/msg/Odometry.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "nav_msgs/msg/odometry.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2OdometryMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSOdometry
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int HeaderStampSec = 0;

	UPROPERTY(EditAnywhere)
	unsigned int HeaderStampNanosec = 0;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString HeaderFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString ChildFrameId;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector PosePosePosition = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat PosePoseOrientation = FQuat::Identity;

	UPROPERTY(EditAnywhere)
	TArray<double> PoseCovariance;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector TwistTwistLinear = FVector::ZeroVector;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector TwistTwistAngular = FVector::ZeroVector;

	UPROPERTY(EditAnywhere)
	TArray<double> TwistCovariance;

	

	void SetFromROS2(const nav_msgs__msg__Odometry& in_ros_data)
	{
    	HeaderStampSec = in_ros_data.header.stamp.sec;

		HeaderStampNanosec = in_ros_data.header.stamp.nanosec;

		HeaderFrameId.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		ChildFrameId.AppendChars(in_ros_data.child_frame_id.data, in_ros_data.child_frame_id.size);

		PosePosePosition.X = in_ros_data.pose.pose.position.x;
		PosePosePosition.Y = in_ros_data.pose.pose.position.y;
		PosePosePosition.Z = in_ros_data.pose.pose.position.z;

		PosePoseOrientation.X = in_ros_data.pose.pose.orientation.x;
		PosePoseOrientation.Y = in_ros_data.pose.pose.orientation.y;
		PosePoseOrientation.Z = in_ros_data.pose.pose.orientation.z;
		PosePoseOrientation.W = in_ros_data.pose.pose.orientation.w;

		for (auto i = 0; i < 36; ++i)
		{
			PoseCovariance.Emplace(in_ros_data.pose.covariance[i]);
		}

		TwistTwistLinear.X = in_ros_data.twist.twist.linear.x;
		TwistTwistLinear.Y = in_ros_data.twist.twist.linear.y;
		TwistTwistLinear.Z = in_ros_data.twist.twist.linear.z;

		TwistTwistAngular.X = in_ros_data.twist.twist.angular.x;
		TwistTwistAngular.Y = in_ros_data.twist.twist.angular.y;
		TwistTwistAngular.Z = in_ros_data.twist.twist.angular.z;

		for (auto i = 0; i < 36; ++i)
		{
			TwistCovariance.Emplace(in_ros_data.twist.covariance[i]);
		}

		
	}

	void SetROS2(nav_msgs__msg__Odometry& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = HeaderStampSec;

		out_ros_data.header.stamp.nanosec = HeaderStampNanosec;

		{
			FTCHARToUTF8 strUtf8( *HeaderFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*HeaderFrameId), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *ChildFrameId );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.child_frame_id.data != nullptr)
		{
			free(out_ros_data.child_frame_id.data);
		}
		out_ros_data.child_frame_id.data = (decltype(out_ros_data.child_frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.child_frame_id.data)));
		memcpy(out_ros_data.child_frame_id.data, TCHAR_TO_UTF8(*ChildFrameId), (strLength+1)*sizeof(char));
			out_ros_data.child_frame_id.size = strLength;
			out_ros_data.child_frame_id.capacity = strLength + 1;
		}

		out_ros_data.pose.pose.position.x = PosePosePosition.X;
		out_ros_data.pose.pose.position.y = PosePosePosition.Y;
		out_ros_data.pose.pose.position.z = PosePosePosition.Z;

		out_ros_data.pose.pose.orientation.x = PosePoseOrientation.X;
		out_ros_data.pose.pose.orientation.y = PosePoseOrientation.Y;
		out_ros_data.pose.pose.orientation.z = PosePoseOrientation.Z;
		out_ros_data.pose.pose.orientation.w = PosePoseOrientation.W;

		for (auto i = 0; i < 36; ++i)
		{
			out_ros_data.pose.covariance[i] = PoseCovariance[i];
		}

		out_ros_data.twist.twist.linear.x = TwistTwistLinear.X;
		out_ros_data.twist.twist.linear.y = TwistTwistLinear.Y;
		out_ros_data.twist.twist.linear.z = TwistTwistLinear.Z;

		out_ros_data.twist.twist.angular.x = TwistTwistAngular.X;
		out_ros_data.twist.twist.angular.y = TwistTwistAngular.Y;
		out_ros_data.twist.twist.angular.z = TwistTwistAngular.Z;

		for (auto i = 0; i < 36; ++i)
		{
			out_ros_data.twist.covariance[i] = TwistCovariance[i];
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2OdometryMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSOdometry& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSOdometry& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	nav_msgs__msg__Odometry odometry_msg;
};