// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from nav_msgs/Odometry.msg - do not modify

#pragma once

#include "CoreMinimal.h"

#include "nav_msgs/msg/odometry.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2OdometryMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSOdometry
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString child_frame_id;

	double pose_pose_position_x;

	double pose_pose_position_y;

	double pose_pose_position_z;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FQuat pose_pose_orientation;

	TArray<double> pose_covariance;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector twist_twist_linear;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FVector twist_twist_angular;

	TArray<double> twist_covariance;

	

	void SetFromROS2(nav_msgs__msg__Odometry rosdata)
	{
    	header_stamp_sec = rosdata.header.stamp.sec;

		header_stamp_nanosec = rosdata.header.stamp.nanosec;

		header_frame_id.AppendChars(rosdata.header.frame_id.data, rosdata.header.frame_id.size);

		child_frame_id.AppendChars(rosdata.child_frame_id.data, rosdata.child_frame_id.size);

		pose_pose_position_x = rosdata.pose.pose.position.x;

		pose_pose_position_y = rosdata.pose.pose.position.y;

		pose_pose_position_z = rosdata.pose.pose.position.z;

		pose_pose_orientation.X = rosdata.pose.pose.orientation.x;
		pose_pose_orientation.Y = rosdata.pose.pose.orientation.y;
		pose_pose_orientation.Z = rosdata.pose.pose.orientation.z;
		pose_pose_orientation.W = rosdata.pose.pose.orientation.w;

		for (int i = 0; i < 36; i++)
		{
			pose_covariance[i] = rosdata.pose.covariance[i];
		}

		twist_twist_linear.X = rosdata.twist.twist.linear.x;
		twist_twist_linear.Y = rosdata.twist.twist.linear.y;
		twist_twist_linear.Z = rosdata.twist.twist.linear.z;

		twist_twist_angular.X = rosdata.twist.twist.angular.x;
		twist_twist_angular.Y = rosdata.twist.twist.angular.y;
		twist_twist_angular.Z = rosdata.twist.twist.angular.z;

		for (int i = 0; i < 36; i++)
		{
			twist_covariance[i] = rosdata.twist.covariance[i];
		}

		
	}

	void SetROS2(nav_msgs__msg__Odometry& rosdata) const
	{
    	rosdata.header.stamp.sec = header_stamp_sec;

		rosdata.header.stamp.nanosec = header_stamp_nanosec;

		if (rosdata.header.frame_id.data != nullptr)
		{
			free(rosdata.header.frame_id.data);
		}
		rosdata.header.frame_id.data = (char*)malloc((header_frame_id.Len()+1)*sizeof(char));
		memcpy(rosdata.header.frame_id.data, TCHAR_TO_ANSI(*header_frame_id), (header_frame_id.Len()+1)*sizeof(char));
		rosdata.header.frame_id.size = header_frame_id.Len();
		rosdata.header.frame_id.capacity = header_frame_id.Len() + 1;

		if (rosdata.child_frame_id.data != nullptr)
		{
			free(rosdata.child_frame_id.data);
		}
		rosdata.child_frame_id.data = (char*)malloc((child_frame_id.Len()+1)*sizeof(char));
		memcpy(rosdata.child_frame_id.data, TCHAR_TO_ANSI(*child_frame_id), (child_frame_id.Len()+1)*sizeof(char));
		rosdata.child_frame_id.size = child_frame_id.Len();
		rosdata.child_frame_id.capacity = child_frame_id.Len() + 1;

		rosdata.pose.pose.position.x = pose_pose_position_x;

		rosdata.pose.pose.position.y = pose_pose_position_y;

		rosdata.pose.pose.position.z = pose_pose_position_z;

		rosdata.pose.pose.orientation.x = pose_pose_orientation.X;
		rosdata.pose.pose.orientation.y = pose_pose_orientation.Y;
		rosdata.pose.pose.orientation.z = pose_pose_orientation.Z;
		rosdata.pose.pose.orientation.w = pose_pose_orientation.W;

		for (int i = 0; i < 36; i++)
		{
			rosdata.pose.covariance[i] = pose_covariance[i];
		}

		rosdata.twist.twist.linear.x = twist_twist_linear.X;
		rosdata.twist.twist.linear.y = twist_twist_linear.Y;
		rosdata.twist.twist.linear.z = twist_twist_linear.Z;

		rosdata.twist.twist.angular.x = twist_twist_angular.X;
		rosdata.twist.twist.angular.y = twist_twist_angular.Y;
		rosdata.twist.twist.angular.z = twist_twist_angular.Z;

		for (int i = 0; i < 36; i++)
		{
			rosdata.twist.covariance[i] = twist_covariance[i];
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2OdometryMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSOdometry Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSOdometry& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	nav_msgs__msg__Odometry odometry_msg;
};