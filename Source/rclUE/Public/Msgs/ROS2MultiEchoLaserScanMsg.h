// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/MultiEchoLaserScan.msg - do not modify

#pragma once

#include "CoreMinimal.h"

#include "sensor_msgs/msg/multi_echo_laser_scan.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2MultiEchoLaserScanMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSMultiEchoLaserScan
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float angle_min;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float angle_max;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float angle_increment;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float time_increment;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float scan_time;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float range_min;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float range_max;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> ranges_echoes;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> intensities_echoes;

	

	void SetFromROS2(sensor_msgs__msg__MultiEchoLaserScan rosdata)
	{
    	header_stamp_sec = rosdata.header.stamp.sec;

		header_stamp_nanosec = rosdata.header.stamp.nanosec;

		header_frame_id.AppendChars(rosdata.header.frame_id.data, rosdata.header.frame_id.size);

		angle_min = rosdata.angle_min;

		angle_max = rosdata.angle_max;

		angle_increment = rosdata.angle_increment;

		time_increment = rosdata.time_increment;

		scan_time = rosdata.scan_time;

		range_min = rosdata.range_min;

		range_max = rosdata.range_max;

		for (int i = 0; i < rosdata.ranges.size; i++)
		{
			ranges_echoes[i] = rosdata.ranges.data[i].echoes.data[i];
		}

		for (int i = 0; i < rosdata.intensities.size; i++)
		{
			intensities_echoes[i] = rosdata.intensities.data[i].echoes.data[i];
		}

		
	}

	void SetROS2(sensor_msgs__msg__MultiEchoLaserScan& rosdata) const
	{
    	rosdata.header.stamp.sec = header_stamp_sec;

		rosdata.header.stamp.nanosec = header_stamp_nanosec;

		if (rosdata.header.frame_id.data != nullptr)
		{
			free(rosdata.header.frame_id.data);
		}
		rosdata.header.frame_id.data = (decltype(rosdata.header.frame_id.data))malloc((header_frame_id.Len() + 1)*sizeof(decltype(*rosdata.header.frame_id.data)));
		memcpy(rosdata.header.frame_id.data, TCHAR_TO_ANSI(*header_frame_id), (header_frame_id.Len()+1)*sizeof(char));
		rosdata.header.frame_id.size = header_frame_id.Len();
		rosdata.header.frame_id.capacity = header_frame_id.Len() + 1;

		rosdata.angle_min = angle_min;

		rosdata.angle_max = angle_max;

		rosdata.angle_increment = angle_increment;

		rosdata.time_increment = time_increment;

		rosdata.scan_time = scan_time;

		rosdata.range_min = range_min;

		rosdata.range_max = range_max;

		if (rosdata.ranges.data != nullptr)
		{
			free(rosdata.ranges.data);
		}
		rosdata.ranges.data = (decltype(rosdata.ranges.data))malloc((ranges_echoes.Num())*sizeof(decltype(*rosdata.ranges.data)));
		
		for (int i = 0; i < ranges_echoes.Num(); i++)
		{
			rosdata.ranges.data[i].echoes.data[i] = ranges_echoes[i];
		}

		rosdata.ranges.size = ranges_echoes.Num();
		rosdata.ranges.capacity = ranges_echoes.Num();

		if (rosdata.intensities.data != nullptr)
		{
			free(rosdata.intensities.data);
		}
		rosdata.intensities.data = (decltype(rosdata.intensities.data))malloc((intensities_echoes.Num())*sizeof(decltype(*rosdata.intensities.data)));
		
		for (int i = 0; i < intensities_echoes.Num(); i++)
		{
			rosdata.intensities.data[i].echoes.data[i] = intensities_echoes[i];
		}

		rosdata.intensities.size = intensities_echoes.Num();
		rosdata.intensities.capacity = intensities_echoes.Num();

		
	}
};

UCLASS()
class RCLUE_API UROS2MultiEchoLaserScanMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSMultiEchoLaserScan Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSMultiEchoLaserScan& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__MultiEchoLaserScan multi_echo_laser_scan_msg;
};